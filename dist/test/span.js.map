{"version":3,"sources":["../../test/span.js"],"names":["constants","opentracing","_prepareObjects","reporter","InMemoryReporter","tracer","Tracer","ConstSampler","logger","MockLogger","spanContext","SpanContext","withBinaryIds","Utils","encodeInt64","SAMPLED_MASK","span","Span","now","describe","beforeEach","it","assert","equal","context","setOperationName","operationName","initialDate","Date","getTime","_startTime","expectedDuration","finishDate","finish","_duration","spans","length","spanInfo","toString","_logger","_errorMsgs","ret","log","event","setTag","Tags","SAMPLING_PRIORITY","isTrue","isDebug","isSampled","JaegerTestUtils","hasTags","tags","addTags","isFalse","keyValuePairs","numberTag","stringTag","booleanTag","count","i","_tags","key","timestamp","_logs","fields","value","payload","a","JSON","stringify","expectedTimestamp","clock","sinon","useFakeTimers","restore","spy","_baggageSetter","setBaggageItem","getBaggageItem","calledOnce","calledWith","child","startSpan","childOf","unnormalizedKey","_normalizeBaggageKey","_getBaggageHeaderCache","_debugThrottler","DefaultThrottler","prevTagLength","samplingFinalized","isAllowedSpy","deepEqual","newSpan","RetryableSampler","decision","_decision","sample","retryable","BaseSamplerV2","_isWriteable","tagKeyTwo","logkeyOne","tagKeyOne","childSpan","unsampledSpan","headers","inject","FORMAT_HTTP_HEADERS","span2","carrier","ctx","extract","isRemote","span3","_sampler","sampledSpan","_spanContext","ProbabilisticSampler"],"mappings":"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","file":"span.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport { adaptSamplerOrThrow } from '../src/samplers/_adapt_sampler';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport * as constants from '../src/constants';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter';\nimport JaegerTestUtils from '../src/test_util';\nimport MockLogger from './lib/mock_logger';\nimport * as opentracing from 'opentracing';\nimport Span from '../src/span';\nimport SpanContext from '../src/span_context';\nimport sinon from 'sinon';\nimport Tracer from '../src/tracer';\nimport Utils from '../src/util';\nimport DefaultThrottler from '../src/throttler/default_throttler';\nimport BaseSamplerV2 from '../src/samplers/v2/base';\n\nfunction _prepareObjects() {\n  let reporter = new InMemoryReporter();\n  let tracer = new Tracer('test-service-name', reporter, new ConstSampler(true), {\n    logger: new MockLogger(),\n  });\n\n  let spanContext = SpanContext.withBinaryIds(\n    Utils.encodeInt64(1),\n    Utils.encodeInt64(2),\n    Utils.encodeInt64(3),\n    constants.SAMPLED_MASK\n  );\n\n  let span = new Span(tracer, 'op-name', spanContext, tracer.now());\n  return { reporter, tracer, span, spanContext };\n}\n\ndescribe('span should', () => {\n  var reporter, tracer, span, spanContext;\n\n  beforeEach(() => {\n    ({ reporter, tracer, span, spanContext } = _prepareObjects());\n  });\n\n  it('return span context when context() is called', () => {\n    assert.equal(span.context(), spanContext);\n  });\n\n  it('return tracer when tracer() is called', () => {\n    assert.equal(span.tracer(), tracer);\n  });\n\n  it('set operation name correctly', () => {\n    span.setOperationName('operation-name');\n    assert.equal(span.operationName, 'operation-name');\n  });\n\n  it('finish span with custom duration', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    span._startTime = initialDate;\n    let expectedDuration = 1000;\n    let finishDate = initialDate + expectedDuration;\n\n    span.finish(finishDate);\n\n    assert.equal(span._duration, expectedDuration);\n    assert.equal(reporter.spans.length, 1);\n    assert.equal(reporter.spans[0], span);\n  });\n\n  it('finish span twice logs error', () => {\n    span.finish();\n    span.finish();\n    let spanInfo = `operation=${span.operationName},context=${span.context().toString()}`;\n    assert.equal(tracer._logger._errorMsgs[0], `${spanInfo}#You can only call finish() on a span once.`);\n  });\n\n  it('return this when calling log method', () => {\n    const ret = span.log({ event: 'event' });\n    assert.equal(ret, span);\n  });\n\n  it('set debug and sampling flags through sampling priority via setTag', () => {\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 3);\n\n    assert.isTrue(span.context().isDebug());\n    assert.isTrue(span.context().isSampled());\n    assert.isTrue(\n      JaegerTestUtils.hasTags(span, {\n        'sampling.priority': 3,\n      })\n    );\n  });\n\n  it('set debug and sampling flags through sampling priority via addTags', () => {\n    let tags = {};\n    tags[opentracing.Tags.SAMPLING_PRIORITY] = 3;\n    span.addTags(tags);\n\n    assert.isTrue(span.context().isDebug());\n    assert.isTrue(span.context().isSampled());\n    assert.isTrue(\n      JaegerTestUtils.hasTags(span, {\n        'sampling.priority': 3,\n      })\n    );\n  });\n\n  it('unset sampling on span via sampling priority', () => {\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 0);\n\n    assert.isFalse(span.context().isSampled());\n  });\n\n  it('add tags', () => {\n    let keyValuePairs = {\n      numberTag: 7,\n      stringTag: 'string',\n      booleanTag: true,\n    };\n    span.addTags(keyValuePairs);\n    span.addTags({ numberTag: 8 });\n\n    // test to make sure consecutive calls with same key does not\n    // overwrite the first key.\n    let count = 0;\n    for (let i = 0; i < span._tags.length; i++) {\n      if (span._tags[i].key === 'numberTag') {\n        count += 1;\n      }\n    }\n\n    assert.equal(span._tags.length, 4);\n    assert.equal(count, 2);\n  });\n\n  it('add logs with timestamp, and event', () => {\n    let timestamp = new Date(2016, 8, 12).getTime();\n    let event = 'some messgae';\n    span.log({ event: event }, timestamp);\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, timestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n  });\n\n  it('add logs with payload', () => {\n    let payload = { a: 1 };\n    span.log({ payload });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(JSON.stringify(span._logs[0].fields[0].value), JSON.stringify(payload));\n  });\n\n  it('add logs with event, but without timestamp', () => {\n    let expectedTimestamp = 123.456;\n    // mock global clock\n    let clock = sinon.useFakeTimers(expectedTimestamp);\n    let event = 'some messgae';\n    span.log({ event });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, expectedTimestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n    clock.restore();\n  });\n\n  it('set and retrieve baggage correctly', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    let spy = sinon.spy(span._baggageSetter, 'setBaggage');\n    span.setBaggageItem(key, value);\n    assert.equal(value, span.getBaggageItem(key));\n    assert(spy.calledOnce);\n    assert(spy.calledWith(span, key, value));\n  });\n\n  it('inherit baggage from parent', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    span.setBaggageItem(key, value);\n    let child = tracer.startSpan('child', { childOf: span.context() });\n    assert.equal(value, child.getBaggageItem(key));\n  });\n\n  it('normalized key correctly', () => {\n    let unnormalizedKey = 'SOME_KEY';\n    let key = span._normalizeBaggageKey(unnormalizedKey);\n\n    assert.equal(key, 'some-key');\n    assert.isTrue(unnormalizedKey in Span._getBaggageHeaderCache());\n  });\n\n  it('not be set to debug via setTag if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isTrue(span.context().samplingFinalized);\n    assert.isFalse(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('not be set to debug via addTags if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    const tags = {};\n    tags[opentracing.Tags.SAMPLING_PRIORITY] = 1;\n    span.addTags(tags);\n    assert.isTrue(span.context().samplingFinalized);\n    assert.isFalse(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('ignore sampling.priority tag if span is already debug', () => {\n    tracer._debugThrottler = new DefaultThrottler();\n    const isAllowedSpy = sinon.spy(tracer._debugThrottler, 'isAllowed');\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isTrue(span.context().samplingFinalized);\n    assert.isTrue(span.context().isDebug());\n    assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    // isAllowed should only be called the first time the sampling.priority tag is set\n    sinon.assert.calledOnce(isAllowedSpy);\n    assert.equal(prevTagLength, span._tags.length, 'The sampling.priority tag should only be set once');\n  });\n\n  describe('setTag', () => {\n    it('should set a tag, and return a span', () => {\n      let newSpan = span.setTag('key', 'value');\n      assert.isTrue(newSpan instanceof Span);\n      assert.isTrue(JaegerTestUtils.hasTags(span, { key: 'value' }));\n    });\n  });\n\n  // TODO(oibe) need tests for standard tags, and handlers\n});\n\ndescribe('sampling finalizer', () => {\n  var reporter, tracer, span, spanContext;\n\n  beforeEach(() => {\n    ({ reporter, tracer, span, spanContext } = _prepareObjects());\n  });\n\n  class RetryableSampler extends BaseSamplerV2 {\n    _decision: boolean;\n    constructor(decision: boolean) {\n      super('RetryableSampler');\n      this._decision = decision;\n    }\n    _tags(): {} {\n      return {\n        'sampler.type': 'const',\n        'sampler.param': this._decision,\n      };\n    }\n    onCreateSpan(span: Span): SamplingDecision {\n      return { sample: this._decision, retryable: true, tags: this._tags() };\n    }\n    onSetOperationName(span: Span, operationName: string): SamplingDecision {\n      return { sample: this._decision, retryable: false, tags: this._tags() };\n    }\n    onSetTag(span: Span, key: string, value: any): SamplingDecision {\n      return { sample: this._decision, retryable: true, tags: this._tags() };\n    }\n  }\n\n  it('should keep the span writeable', () => {\n    let tracer = new Tracer('test-service-name', reporter, new RetryableSampler(false));\n    let span = tracer.startSpan('initially-unsampled-span');\n    assert.isTrue(span._isWriteable(), 'span is writeable when created');\n    assert.isFalse(span.context().samplingFinalized, 'span is not finalized when created');\n    span.setTag('tagKeyOne', 'tagValueOne');\n    span.addTags({\n      tagKeyTwo: 'tagValueTwo',\n    });\n    span.log({ logkeyOne: 'logValueOne' });\n    assert.isTrue(span._isWriteable(), 'span is writeable after setting tags');\n    assert.isTrue(\n      JaegerTestUtils.hasTags(\n        span,\n        {\n          tagKeyOne: 'tagValueOne',\n          tagKeyTwo: 'tagValueTwo',\n        },\n        'matching tags'\n      )\n    );\n    assert.deepEqual(span._logs[0].fields[0], { key: 'logkeyOne', value: 'logValueOne' });\n  });\n\n  it('should make span non-writeable when sampler returns retryable=false', () => {\n    let tracer = new Tracer('test-service-name', reporter, new RetryableSampler(false));\n    let span = tracer.startSpan('initially-unsampled-span');\n    assert.isTrue(span._isWriteable(), 'span is writeable when created');\n    assert.isFalse(span.context().samplingFinalized, 'span is not finalized when created');\n    // note: RetryableSampler returns retryable=false from onSetOperation()\n    span.setOperationName('replace-op-name');\n    assert.isFalse(span._isWriteable(), 'span is writeable after setting tags');\n    assert.isTrue(span.context().samplingFinalized, 'span is not finalized when created');\n  });\n\n  it('should share sampling state with children spans', () => {\n    let tracer = new Tracer('test-service-name', reporter, new RetryableSampler(false));\n    let span = tracer.startSpan('initially-unsampled-span');\n    assert.equal(span.context().samplingFinalized, false, 'new unsampled span is not finalized');\n\n    let childSpan = tracer.startSpan('child-span', { childOf: span });\n    assert.isFalse(span.context().samplingFinalized);\n    assert.isFalse(childSpan.context().samplingFinalized);\n  });\n\n  it('should trigger when it sets the sampling priority', () => {\n    assert.isFalse(span.context().samplingFinalized, 'manual span is not finalized');\n\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isTrue(span.context().samplingFinalized);\n    assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n    const unsampledSpan = tracer.startSpan('unsampled-span');\n    const prevTagLength = span._tags.length;\n    unsampledSpan.setTag(opentracing.Tags.SAMPLING_PRIORITY, -1);\n    assert.isTrue(unsampledSpan.context().samplingFinalized);\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if span is finalized and not sampled'\n    );\n  });\n\n  it('should finalize the span sampled with V1 sampler', () => {\n    let span = tracer.startSpan('test');\n    assert.isTrue(span.context().samplingFinalized, 'finalized');\n  });\n\n  it('should not trigger on a finish()-ed span', () => {\n    assert.isFalse(span.context().samplingFinalized, 'manual span is not finalized');\n    span.finish();\n    assert.isFalse(span.context().samplingFinalized, 'finished span may remain unfinalized');\n  });\n\n  it('should trigger after calling setOperationName with V1 sampler', () => {\n    assert.isFalse(span.context().samplingFinalized, 'manual span is not finalized');\n    span.setOperationName('fry');\n    assert.isTrue(span.context().samplingFinalized, 'finalized by V1 sampler');\n  });\n\n  it('should not trigger when its context is injected into headers', () => {\n    assert.isFalse(span.context().samplingFinalized, 'manual span is not finalized');\n\n    let headers = {};\n    tracer.inject(span.context(), opentracing.FORMAT_HTTP_HEADERS, headers);\n\n    assert.isFalse(span.context().samplingFinalized, 'remains unfinalized after inject()');\n  });\n\n  it('should finalize the child span created with remote parent', () => {\n    let tracer = new Tracer('test-service-name', reporter, new RetryableSampler(false));\n    let span = tracer.startSpan('test');\n    assert.isFalse(span.context().samplingFinalized, 'new root span not finalized');\n    let span2 = tracer.startSpan('test2', { childOf: span.context() });\n    assert.isFalse(span2.context().samplingFinalized, 'child span not finalized');\n    let carrier = {};\n    tracer.inject(span2.context(), opentracing.FORMAT_HTTP_HEADERS, carrier);\n    let ctx = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, carrier);\n    assert.isTrue(ctx.isRemote(), 'extracted context is \"remote\"');\n    let span3 = tracer.startSpan('test2', { childOf: ctx });\n    assert.isTrue(span3.context().samplingFinalized, 'child span of remote parent is finalized');\n  });\n\n  it('should keep isWriteable=true if span is sampled or not finalized', () => {\n    let tracer = new Tracer('test-service-name', reporter, new RetryableSampler(false));\n    let span = tracer.startSpan('initially-unsampled-span');\n    assert.isFalse(span.context().samplingFinalized, 'not finalized');\n    assert.isFalse(span.context().isSampled(), 'not sampled');\n    assert.isTrue(span._isWriteable());\n\n    tracer._sampler = adaptSamplerOrThrow(new ConstSampler(true));\n    let sampledSpan = tracer.startSpan('sampled-span');\n    assert.isTrue(sampledSpan.context().isSampled(), 'sampled');\n    assert.isTrue(sampledSpan.context().samplingFinalized, 'finalized');\n    assert.isTrue(sampledSpan._isWriteable(), 'writeable');\n  });\n\n  it('should allow 2nd setOperationName to change operationName, but not to affect sampling', () => {\n    let span = tracer.startSpan('fry');\n    assert.equal(span.operationName, 'fry');\n    assert.isTrue(span._spanContext.isSampled());\n    assert.isTrue(span._spanContext.samplingFinalized);\n    assert.isTrue(\n      JaegerTestUtils.hasTags(span, {\n        'sampler.type': 'const',\n        'sampler.param': true,\n      })\n    );\n    tracer._sampler = adaptSamplerOrThrow(new ProbabilisticSampler(1.0));\n    span._tags = []; // JaegerTestUtils.hasTags() below doesn't work with dupes\n    span.setOperationName('re-sampled-span');\n    assert.equal(span.operationName, 're-sampled-span');\n    assert.equal(0, span._tags.length);\n  });\n});\n"]}