{"version":3,"sources":["../../../test/samplers/exp_extend_remote_sampler.js"],"names":["describe","ExtendedRemoteSampler","serviceName","options","strategy","tagEqualsStrategy","tagSampler","TagEqualsSampler","fromStrategy","_sampler","PrioritySampler","_delegates","classicStrategy","RemoteSampler","server","logger","metrics","remoteSampler","before","ConfigServer","start","after","close","beforeEach","clearConfigs","MockLogger","Metrics","LocalMetricFactory","refreshInterval","afterEach","it","done","addStrategy","strategyType","key","values","value1","firehose","value2","operationSampling","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","operation","probabilisticSampling","samplingRate","_onSamplerUpdate","assert","instanceOf","s","_refreshSamplingStrategy"],"mappings":";;;;;;AAaA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBAA,SAAS,yBAAT,EAAoC,YAAM;AAAA,MAClCC,qBADkC;AAAA;;AAEtC,mCAAYC,WAAZ,EAAoD;AAAA,UAAnBC,OAAmB,uEAAJ,EAAI;;AAAA;;AAAA,2IAC5CD,WAD4C,EAC/BC,OAD+B;AAEnD;;AAJqC;AAAA;AAAA,qCAMvBC,QANuB,EAMC;AACrC,YAAIA,SAASC,iBAAb,EAAgC;AAC9B,cAAIC,aAAaC,6BAAiBC,YAAjB,CAA8BJ,SAASC,iBAAvC,CAAjB;AACA,cAAI,KAAKI,QAAL,YAAyBC,0BAA7B,EAA8C;AAC5C,iBAAKD,QAAL,GAAgB,KAAKA,QAAL,CAAcE,UAAd,CAAyB,CAAzB,CAAhB;AACD;AACD,uJAAqBP,SAASQ,eAA9B;AACA,eAAKH,QAAL,GAAgB,IAAIC,0BAAJ,CAAoB,CAACJ,UAAD,EAAa,KAAKG,QAAlB,CAApB,CAAhB;AACA,iBAAO,IAAP;AACD;AACD,4JAA4BL,SAASQ,eAArC;AACD;AAjBqC;;AAAA;AAAA,IACJC,wBADI;;AAoBxC,MAAIC,eAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,sBAAJ;;AAEAC,SAAO,YAAM;AACXJ,aAAS,IAAIK,uBAAJ,GAAmBC,KAAnB,EAAT;AACD,GAFD;;AAIAC,QAAM,YAAM;AACVP,WAAOQ,KAAP;AACD,GAFD;;AAIAC,aAAW,YAAM;AACfT,WAAOU,YAAP;AACAT,aAAS,IAAIU,qBAAJ,EAAT;AACAT,cAAU,IAAIU,iBAAJ,CAAY,IAAIC,wBAAJ,EAAZ,CAAV;AACAV,oBAAgB,IAAIhB,qBAAJ,CAA0B,UAA1B,EAAsC;AACpD2B,uBAAiB,CADmC;AAEpDZ,eAASA,OAF2C;AAGpDD,cAAQA;AAH4C,KAAtC,CAAhB;AAKD,GATD;;AAWAc,YAAU,YAAM;AACdZ,kBAAcK,KAAd;AACD,GAFD;;AAIAQ,KAAG,yCAAH,EAA8C,UAASC,IAAT,EAAe;AAC3DjB,WAAOkB,WAAP,CAAmB,UAAnB,EAA+B;AAC7BC,oBAAc,EADe,EACX;AAClB5B,yBAAmB;AACjB6B,aAAK,QADY;AAEjBC,gBAAQ;AACNC,kBAAQ;AACNC,sBAAU;AADJ,WADF;AAINC,kBAAQ;AACND,sBAAU;AADJ;AAJF;AAFS,OAFU;AAa7BzB,uBAAiB;AACf2B,2BAAmB;AACjBC,4CAAkC,CADjB;AAEjBC,sCAA4B,CAFX;AAGjBC,kCAAwB,CACtB;AACEC,uBAAW,KADb;AAEEC,mCAAuB;AACrBC,4BAAc;AADO;AAFzB,WADsB;AAHP;AADJ;AAbY,KAA/B;AA4BA5B,kBAAc6B,gBAAd,GAAiC,aAAK;AACpCC,mBAAOC,UAAP,CAAkBC,CAAlB,EAAqBvC,0BAArB;AACAqB;AACD,KAHD;AAIAd,kBAAciC,wBAAd;AACD,GAlCD;AAmCD,CAnFD","file":"exp_extend_remote_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport ConfigServer from '../lib/config_server';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport Metrics from '../../src/metrics/metrics.js';\nimport MockLogger from '../lib/mock_logger';\nimport PrioritySampler from '../../src/samplers/experimental/priority_sampler';\nimport RemoteSampler from '../../src/samplers/remote_sampler';\nimport Span from '../../src/span';\nimport TagEqualsSampler from '../../src/samplers/experimental/tag_equals_sampler';\nimport Tracer from '../../src/tracer';\nimport Utils from '../../src/util';\n\ndescribe('extended remote sampler', () => {\n  class ExtendedRemoteSampler extends RemoteSampler {\n    constructor(serviceName: string, options: any = {}) {\n      super(serviceName, options);\n    }\n\n    _updateSampler(strategy: any): boolean {\n      if (strategy.tagEqualsStrategy) {\n        let tagSampler = TagEqualsSampler.fromStrategy(strategy.tagEqualsStrategy);\n        if (this._sampler instanceof PrioritySampler) {\n          this._sampler = this._sampler._delegates[1];\n        }\n        super._updateSampler(strategy.classicStrategy);\n        this._sampler = new PrioritySampler([tagSampler, this._sampler]);\n        return true;\n      }\n      return super._updateSampler(strategy.classicStrategy);\n    }\n  }\n\n  let server: ConfigServer;\n  let logger: MockLogger;\n  let metrics: Metrics;\n  let remoteSampler: ExtendedRemoteSampler;\n\n  before(() => {\n    server = new ConfigServer().start();\n  });\n\n  after(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    server.clearConfigs();\n    logger = new MockLogger();\n    metrics = new Metrics(new LocalMetricFactory());\n    remoteSampler = new ExtendedRemoteSampler('service1', {\n      refreshInterval: 0,\n      metrics: metrics,\n      logger: logger,\n    });\n  });\n\n  afterEach(() => {\n    remoteSampler.close();\n  });\n\n  it('should parse extended strategy response', function(done) {\n    server.addStrategy('service1', {\n      strategyType: '', // this is needed yo satisfy server.addStrategy type\n      tagEqualsStrategy: {\n        key: 'theTag',\n        values: {\n          value1: {\n            firehose: true,\n          },\n          value2: {\n            firehose: false,\n          },\n        },\n      },\n      classicStrategy: {\n        operationSampling: {\n          defaultLowerBoundTracesPerSecond: 0,\n          defaultSamplingProbability: 0,\n          perOperationStrategies: [\n            {\n              operation: 'op1',\n              probabilisticSampling: {\n                samplingRate: 0,\n              },\n            },\n          ],\n        },\n      },\n    });\n    remoteSampler._onSamplerUpdate = s => {\n      assert.instanceOf(s, PrioritySampler);\n      done();\n    };\n    remoteSampler._refreshSamplingStrategy();\n  });\n});\n"]}