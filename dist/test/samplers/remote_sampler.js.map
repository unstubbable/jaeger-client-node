{"version":3,"sources":["../../../test/samplers/remote_sampler.js"],"names":["describe","server","logger","metrics","remoteSampler","before","ConfigServer","start","after","close","beforeEach","clearConfigs","MockLogger","Metrics","LocalMetricFactory","RemoteSampler","refreshInterval","afterEach","it","samplerQueryFailure","increment","assert","equal","_errorMsgs","length","done","_port","_refreshSamplingStrategy","badResponses","forEach","resp","samplerUpdateFailure","addStrategy","_serviceName","_onSamplerUpdate","s","_samplingRate","LocalBackend","counterValue","samplerRetrieved","samplerUpdated","firstSampler","strictEqual","strategyType","probabilisticSampling","samplingRate","maxTracesPerSecond","isTrue","RateLimitingSampler","rateLimitingSampling","rateLimitingSampler","_sampler","instanceOf","ProbabilisticSampler","operationSampling","defaultSamplingProbability","defaultLowerBoundTracesPerSecond","perOperationStrategies","PerOperationSampler","s2","operation","tracer","Tracer","NoopReporter","sp0","startSpan","context","isSampled","sp1","isFalse","setOperationName","parent","samplingFinalized","child","childOf","clock","sinon","useFakeTimers","sampler","onSamplerUpdate","notEqual","toString","restore","tick","decision","sample","retryable","tags","fake","mockSampler","onCreateSpan","span","_onCreateSpan","onSetOperationName","operationName","_onSetOperationName","onSetTag","key","value","_onSetTag","deepEqual","samplingPath","rs","_samplingPath"],"mappings":";;AAYA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAM;AAC9B,MAAIC,eAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,sBAAJ;;AAEAC,SAAO,YAAM;AACXJ,aAAS,IAAIK,uBAAJ,GAAmBC,KAAnB,EAAT;AACD,GAFD;;AAIAC,QAAM,YAAM;AACVP,WAAOQ,KAAP;AACD,GAFD;;AAIAC,aAAW,YAAM;AACfT,WAAOU,YAAP;AACAT,aAAS,IAAIU,qBAAJ,EAAT;AACAT,cAAU,IAAIU,iBAAJ,CAAY,IAAIC,wBAAJ,EAAZ,CAAV;AACAV,oBAAgB,IAAIW,wBAAJ,CAAkB,UAAlB,EAA8B;AAC5CC,uBAAiB,CAD2B;AAE5Cb,eAASA,OAFmC;AAG5CD,cAAQA;AAHoC,KAA9B,CAAhB;AAKD,GATD;;AAWAe,YAAU,YAAM;AACdb,kBAAcK,KAAd;AACD,GAFD;;AAIAS,KAAG,6DAAH,EAAkE,gBAAQ;AACxEf,YAAQgB,mBAAR,CAA4BC,SAA5B,GAAwC,YAAW;AACjDC,mBAAOC,KAAP,CAAapB,OAAOqB,UAAP,CAAkBC,MAA/B,EAAuC,CAAvC,cAAoDtB,OAAOqB,UAA3D;AACAE;AACD,KAHD;AAIArB,kBAAcsB,KAAd,GAAsB,CAAtB,CALwE,CAK/C;AACzBtB,kBAAcuB,wBAAd;AACD,GAPD;;AASA,MAAIC,eAA2B,CAAC,MAAD,EAAS,GAAT,EAAc,OAAd,EAAuB,EAAvB,CAA/B;AACAA,eAAaC,OAAb,CAAqB,gBAAQ;AAC3BX,oEAA8DY,IAA9D,EAAsE,gBAAQ;AAC5E3B,cAAQ4B,oBAAR,CAA6BX,SAA7B,GAAyC,YAAW;AAClDC,qBAAOC,KAAP,CAAapB,OAAOqB,UAAP,CAAkBC,MAA/B,EAAuC,CAAvC,cAAoDtB,OAAOqB,UAA3D;AACAE;AACD,OAHD;AAIAxB,aAAO+B,WAAP,CAAmB,UAAnB,EAA+BF,IAA/B;AACA1B,oBAAcuB,wBAAd;AACD,KAPD;AAQD,GATD;;AAWAT,KAAG,6CAAH,EAAkD,gBAAQ;AACxDf,YAAQ4B,oBAAR,CAA6BX,SAA7B,GAAyC,YAAW;AAClDC,mBAAOC,KAAP,CAAapB,OAAOqB,UAAP,CAAkBC,MAA/B,EAAuC,CAAvC;AACAC;AACD,KAHD;AAIArB,kBAAc6B,YAAd,GAA6B,aAA7B;AACA7B,kBAAcuB,wBAAd;AACD,GAPD;;AASAT,KAAG,iDAAH,EAAsD,gBAAQ;AAC5Dd,kBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,mBAAOC,KAAP,CAAaa,EAAEC,aAAf,EAA8B,GAA9B;AACAf,mBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQoC,gBAAlC,CAAb,EAAkE,CAAlE;AACAlB,mBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQqC,cAAlC,CAAb,EAAgE,CAAhE;;AAEA,UAAIC,eAAeN,CAAnB;;AAEA;AACA/B,oBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,qBAAOqB,WAAP,CAAmBP,CAAnB,EAAsBM,YAAtB,EAAoC,mCAApC;;AAEApB,qBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQoC,gBAAlC,CAAb,EAAkE,CAAlE;AACAlB,qBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQqC,cAAlC,CAAb,EAAgE,CAAhE;;AAEA;AACApC,sBAAc8B,gBAAd,GAAiC,IAAjC;AACA9B,sBAAcuB,wBAAd;;AAEAF;AACD,OAXD;;AAaArB,oBAAcuB,wBAAd;AACD,KAtBD;AAuBA1B,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BC,6BAAuB;AACrBC,sBAAc;AADO;AAFM,KAA/B;AAMAzC,kBAAcuB,wBAAd;AACD,GA/BD;;AAiCAT,KAAG,iCAAH,EAAsC,gBAAQ;AAC5C,QAAI4B,qBAAqB,EAAzB;AACA1C,kBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,mBAAO0B,MAAP,CAAcZ,EAAEb,KAAF,CAAQ,IAAI0B,+BAAJ,CAAwBF,kBAAxB,CAAR,CAAd;AACArB;AACD,KAHD;AAIAxB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BM,4BAAsB;AACpBH,4BAAoBA;AADA;AAFO,KAA/B;AAMA1C,kBAAcuB,wBAAd;AACD,GAbD;;AAeAT,KAAG,oCAAH,EAAyC,gBAAQ;AAC/C,QAAIgC,sBAAsB,IAAIF,+BAAJ,CAAwB,EAAxB,CAA1B;AACA5C,kBAAc+C,QAAd,GAAyBD,mBAAzB;AACA,QAAIJ,qBAAqB,CAAzB;AACA1C,kBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,mBAAOqB,WAAP,CAAmBQ,mBAAnB,EAAwC9C,cAAc+C,QAAtD;AACA9B,mBAAO0B,MAAP,CAAcZ,EAAEb,KAAF,CAAQ,IAAI0B,+BAAJ,CAAwBF,kBAAxB,CAAR,CAAd;AACArB;AACD,KAJD;AAKAxB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BM,4BAAsB;AACpBH,4BAAoBA;AADA;AAFO,KAA/B;AAMA1C,kBAAcuB,wBAAd;AACD,GAhBD;;AAkBAT,KAAG,oCAAH,EAAyC,gBAAQ;AAC/Cd,kBAAc+C,QAAd,GAAyB,IAAIH,+BAAJ,CAAwB,EAAxB,CAAzB;AACA3B,iBAAO+B,UAAP,CAAkBhD,cAAc+C,QAAhC,EAA0CH,+BAA1C;AACA5C,kBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,mBAAO+B,UAAP,CAAkBhD,cAAc+C,QAAhC,EAA0CE,+BAA1C;AACA5B;AACD,KAHD;AAIAxB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BC,6BAAuB;AACrBC,sBAAc;AADO;AAFM,KAA/B;AAMAzC,kBAAcuB,wBAAd;AACD,GAdD;;AAgBAT,KAAG,kCAAH,EAAuC,gBAAQ;AAC7CjB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BC,6BAAuB;AACrBC,sBAAc;AADO,OAFM;AAK7BS,yBAAmB;AACjBC,oCAA4B,IADX;AAEjBC,0CAAkC,GAFjB;AAGjBC,gCAAwB;AAHP;AALU,KAA/B;AAWArD,kBAAc8B,gBAAd,GAAiC,aAAK;AACpCb,mBAAO0B,MAAP,CAAcZ,aAAauB,+BAA3B;AACArC,mBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQoC,gBAAlC,CAAb,EAAkE,CAAlE;AACAlB,mBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQqC,cAAlC,CAAb,EAAgE,CAAhE;;AAEA;AACApC,oBAAc8B,gBAAd,GAAiC,cAAM;AACrCb,qBAAOqB,WAAP,CAAmBiB,EAAnB,EAAuBxB,CAAvB;AACAd,qBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQoC,gBAAlC,CAAb,EAAkE,CAAlE,EAAqE,kBAArE;AACAlB,qBAAOC,KAAP,CAAae,kBAAaC,YAAb,CAA0BnC,QAAQqC,cAAlC,CAAb,EAAgE,CAAhE,EAAmE,eAAnE;AACAf;AACD,OALD;AAMArB,oBAAcuB,wBAAd;AACD,KAbD;AAcAvB,kBAAcuB,wBAAd;AACD,GA3BD;;AA6BAT,KAAG,qDAAH,EAA0D,gBAAQ;AAChEjB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BC,6BAAuB;AACrBC,sBAAc;AADO,OAFM;AAK7BS,yBAAmB;AACjBC,oCAA4B,IADX;AAEjBC,0CAAkC,GAFjB;AAGjBC,gCAAwB,CACtB;AACEG,qBAAW,KADb;AAEEhB,iCAAuB,EAAEC,cAAc,GAAhB;AAFzB,SADsB,EAKtB;AACEe,qBAAW,KADb;AAEEhB,iCAAuB,EAAEC,cAAc,GAAhB;AAFzB,SALsB;AAHP;AALU,KAA/B;AAoBAzC,kBAAc8B,gBAAd,GAAiC,aAAK;AACpC,UAAI2B,SAAS,IAAIC,gBAAJ,CAAW,SAAX,EAAsB,IAAIC,uBAAJ,EAAtB,EAA0C5B,CAA1C,CAAb;;AAEA,UAAI6B,MAAMH,OAAOI,SAAP,CAAiB,KAAjB,CAAV;AACA5C,mBAAO0B,MAAP,CAAciB,IAAIE,OAAJ,GAAcC,SAAd,EAAd,EAAyC,wCAAzC;;AAEA,UAAIC,MAAMP,OAAOI,SAAP,CAAiB,KAAjB,CAAV;AACA5C,mBAAOgD,OAAP,CAAeD,IAAIF,OAAJ,GAAcC,SAAd,EAAf,EAA0C,2BAA1C;AACAC,UAAIE,gBAAJ,CAAqB,KAArB;AACAjD,mBAAO0B,MAAP,CAAcqB,IAAIF,OAAJ,GAAcC,SAAd,EAAd,EAAyC,wCAAzC;;AAEA,UAAII,SAASV,OAAOI,SAAP,CAAiB,KAAjB,CAAb;AACA5C,mBAAOgD,OAAP,CAAeE,OAAOL,OAAP,GAAiBC,SAAjB,EAAf,EAA6C,mCAA7C;AACA9C,mBAAOgD,OAAP,CAAeE,OAAOL,OAAP,GAAiBM,iBAAhC,EAAmD,qCAAnD;;AAEA,UAAIC,QAAQZ,OAAOI,SAAP,CAAiB,KAAjB,EAAwB,EAAES,SAASH,MAAX,EAAxB,CAAZ;AACAlD,mBAAOgD,OAAP,CAAeI,MAAMP,OAAN,GAAgBC,SAAhB,EAAf,EAA4C,gDAA5C;AACA9C,mBAAOgD,OAAP,CAAeI,MAAMP,OAAN,GAAgBM,iBAA/B,EAAkD,oCAAlD;AACAC,YAAMH,gBAAN,CAAuB,KAAvB;AACAjD,mBAAOgD,OAAP,CAAeI,MAAMP,OAAN,GAAgBC,SAAhB,EAAf,EAA4C,6CAA5C;AACA9C,mBAAO0B,MAAP,CACE0B,MAAMP,OAAN,GAAgBM,iBADlB,EAEE,uDAFF;;AAKA/C;AACD,KA1BD;AA2BArB,kBAAcuB,wBAAd;AACD,GAjDD;;AAmDAT,KAAG,6BAAH,EAAkC,gBAAQ;AACxCjB,WAAO+B,WAAP,CAAmB,UAAnB,EAA+B;AAC7BW,oBAAc,eADe;AAE7BC,6BAAuB;AACrBC,sBAAc;AADO;AAFM,KAA/B;;AAOA,QAAI8B,QAAaC,gBAAMC,aAAN,EAAjB;;AAEA,QAAIC,UAAU,IAAI/D,wBAAJ,CAAkB,UAAlB,EAA8B;AAC1CC,uBAAiB,EADyB,EACrB;AACrBb,eAASA,OAFiC;AAG1CD,cAAQA,MAHkC;AAI1C6E,uBAAiB,4BAAK;AACpB1D,qBAAO2D,QAAP,CAAgB3C,kBAAaC,YAAb,CAA0BnC,QAAQoC,gBAAlC,CAAhB,EAAqE,CAArE;AACAlB,qBAAO2D,QAAP,CAAgB3C,kBAAaC,YAAb,CAA0BnC,QAAQqC,cAAlC,CAAhB,EAAmE,CAAnE;AACAnB,qBAAOC,KAAP,CAAapB,OAAOqB,UAAP,CAAkBC,MAA/B,EAAuC,CAAvC,EAA0C,sBAA1C;AACAH,qBAAO0B,MAAP,CAAc+B,QAAQ3B,QAAR,CAAiB7B,KAAjB,CAAuB,IAAI+B,+BAAJ,CAAyB,KAAzB,CAAvB,CAAd,EAAuEyB,QAAQ3B,QAAR,CAAiB8B,QAAjB,EAAvE;;AAEAN,cAAMO,OAAN;;AAEAJ,gBAAQ5C,gBAAR,GAA2B,IAA3B;AACA4C,gBAAQrE,KAAR,CAAcgB,IAAd;AACD;AAdyC,KAA9B,CAAd;;AAiBAkD,UAAMQ,IAAN,CAAW,EAAX;AACD,GA5BD;;AA8BAjE,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAMkE,WAA6B;AACjCC,cAAQ,KADyB;AAEjCC,iBAAW,IAFsB;AAGjCC,YAAM,IAH2B;AAIjCC,YAAM;AAJ2B,KAAnC;AAMA,QAAMC,cAAuB;AAC3BC,oBAAc,SAASA,YAAT,CAAsBC,IAAtB,EAAoD;AAChE,aAAKC,aAAL,GAAqB,CAACD,IAAD,CAArB;AACA,eAAOP,QAAP;AACD,OAJ0B;AAK3BS,0BAAoB,SAASA,kBAAT,CAA4BF,IAA5B,EAAwCG,aAAxC,EAAiF;AACnG,aAAKC,mBAAL,GAA2B,CAACJ,IAAD,EAAOG,aAAP,CAA3B;AACA,eAAOV,QAAP;AACD,OAR0B;AAS3BY,gBAAU,SAASH,kBAAT,CAA4BF,IAA5B,EAAwCM,GAAxC,EAAqDC,KAArD,EAAmF;AAC3F,aAAKC,SAAL,GAAiB,CAACR,IAAD,EAAOM,GAAP,EAAYC,KAAZ,CAAjB;AACA,eAAOd,QAAP;AACD;AAZ0B,KAA7B;AAcAhF,kBAAc+C,QAAd,GAAyBsC,WAAzB;AACA,QAAME,OAAa,EAAEH,MAAM,MAAR,EAAnB;;AAEAnE,iBAAO+E,SAAP,CAAiBhB,QAAjB,EAA2BhF,cAAcsF,YAAd,CAA2BC,IAA3B,CAA3B;AACAtE,iBAAO+E,SAAP,CAAiB,CAACT,IAAD,CAAjB,EAAyBF,YAAYG,aAArC;;AAEAvE,iBAAO+E,SAAP,CAAiBhB,QAAjB,EAA2BhF,cAAcyF,kBAAd,CAAiCF,IAAjC,EAAuC,KAAvC,CAA3B;AACAtE,iBAAO+E,SAAP,CAAiB,CAACT,IAAD,EAAO,KAAP,CAAjB,EAAgCF,YAAYM,mBAA5C;;AAEA1E,iBAAO+E,SAAP,CAAiBhB,QAAjB,EAA2BhF,cAAc4F,QAAd,CAAuBL,IAAvB,EAA6B,IAA7B,EAAmC,MAAnC,CAA3B;AACAtE,iBAAO+E,SAAP,CAAiB,CAACT,IAAD,EAAO,IAAP,EAAa,MAAb,CAAjB,EAAuCF,YAAYU,SAAnD;AACD,GAhCD;;AAkCAjF,KAAG,4DAAH,EAAiE,YAAM;AACrE,QAAImF,eAAe,uBAAnB;AACA,QAAIC,KAAK,IAAIvF,wBAAJ,CAAkB,UAAlB,EAA8B;AACrCsF,oBAAcA;AADuB,KAA9B,CAAT;AAGAhF,iBAAOC,KAAP,CAAagF,GAAGC,aAAhB,EAA+BF,YAA/B;AACD,GAND;AAOD,CApSD,E,CA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"remote_sampler.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport sinon from 'sinon';\nimport Metrics from '../../src/metrics/metrics.js';\nimport RateLimitingSampler from '../../src/samplers/rate_limiting_sampler';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler';\nimport RemoteSampler from '../../src/samplers/remote_sampler';\nimport MockLogger from '../lib/mock_logger';\nimport ConfigServer from '../lib/config_server';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport Tracer from '../../src/tracer.js';\nimport NoopReporter from '../../src/reporters/noop_reporter.js';\n\ndescribe('RemoteSampler', () => {\n  let server: ConfigServer;\n  let logger: MockLogger;\n  let metrics: Metrics;\n  let remoteSampler: RemoteSampler;\n\n  before(() => {\n    server = new ConfigServer().start();\n  });\n\n  after(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    server.clearConfigs();\n    logger = new MockLogger();\n    metrics = new Metrics(new LocalMetricFactory());\n    remoteSampler = new RemoteSampler('service1', {\n      refreshInterval: 0,\n      metrics: metrics,\n      logger: logger,\n    });\n  });\n\n  afterEach(() => {\n    remoteSampler.close();\n  });\n\n  it('should log metric on failing to query for sampling strategy', done => {\n    metrics.samplerQueryFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    remoteSampler._port = 1; // Nothing running on this port, should error\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  let badResponses: Array<any> = ['junk', '0', 'false', {}];\n  badResponses.forEach(resp => {\n    it(`should log metric on failing to parse bad http response ${resp}`, done => {\n      metrics.samplerUpdateFailure.increment = function() {\n        assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n        done();\n      };\n      server.addStrategy('service1', resp);\n      remoteSampler._refreshSamplingStrategy();\n    });\n  });\n\n  it('should throw error on bad sampling strategy', done => {\n    metrics.samplerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1);\n      done();\n    };\n    remoteSampler._serviceName = 'bad-service';\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set probabilistic sampler, but only once', done => {\n    remoteSampler._onSamplerUpdate = s => {\n      assert.equal(s._samplingRate, 1.0);\n      assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 1);\n      assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n      let firstSampler = s;\n\n      // prepare for second update\n      remoteSampler._onSamplerUpdate = s => {\n        assert.strictEqual(s, firstSampler, 'must not have changed the sampler');\n\n        assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 2);\n        assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n        // prepare for third update - for test coverage only\n        remoteSampler._onSamplerUpdate = null;\n        remoteSampler._refreshSamplingStrategy();\n\n        done();\n      };\n\n      remoteSampler._refreshSamplingStrategy();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 1.0,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set ratelimiting sampler', done => {\n    let maxTracesPerSecond = 10;\n    remoteSampler._onSamplerUpdate = s => {\n      assert.isTrue(s.equal(new RateLimitingSampler(maxTracesPerSecond)));\n      done();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'RATE_LIMITING',\n      rateLimitingSampling: {\n        maxTracesPerSecond: maxTracesPerSecond,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should update ratelimiting sampler', done => {\n    let rateLimitingSampler = new RateLimitingSampler(10);\n    remoteSampler._sampler = rateLimitingSampler;\n    let maxTracesPerSecond = 5;\n    remoteSampler._onSamplerUpdate = s => {\n      assert.strictEqual(rateLimitingSampler, remoteSampler._sampler);\n      assert.isTrue(s.equal(new RateLimitingSampler(maxTracesPerSecond)));\n      done();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'RATE_LIMITING',\n      rateLimitingSampling: {\n        maxTracesPerSecond: maxTracesPerSecond,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should reset probabilistic sampler', done => {\n    remoteSampler._sampler = new RateLimitingSampler(10);\n    assert.instanceOf(remoteSampler._sampler, RateLimitingSampler);\n    remoteSampler._onSamplerUpdate = s => {\n      assert.instanceOf(remoteSampler._sampler, ProbabilisticSampler);\n      done();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 1.0,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set per-operation sampler', done => {\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 1.0,\n      },\n      operationSampling: {\n        defaultSamplingProbability: 0.05,\n        defaultLowerBoundTracesPerSecond: 0.1,\n        perOperationStrategies: [],\n      },\n    });\n    remoteSampler._onSamplerUpdate = s => {\n      assert.isTrue(s instanceof PerOperationSampler);\n      assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 1);\n      assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n      // cause a second refresh without changes\n      remoteSampler._onSamplerUpdate = s2 => {\n        assert.strictEqual(s2, s);\n        assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 2, 'second retrieval');\n        assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1, 'but no update');\n        done();\n      };\n      remoteSampler._refreshSamplingStrategy();\n    };\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should not use per-operation sampler on child spans', done => {\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 0.0,\n      },\n      operationSampling: {\n        defaultSamplingProbability: 0.05,\n        defaultLowerBoundTracesPerSecond: 0.1,\n        perOperationStrategies: [\n          {\n            operation: 'op1',\n            probabilisticSampling: { samplingRate: 0.0 },\n          },\n          {\n            operation: 'op2',\n            probabilisticSampling: { samplingRate: 1.0 },\n          },\n        ],\n      },\n    });\n    remoteSampler._onSamplerUpdate = s => {\n      let tracer = new Tracer('service', new NoopReporter(), s);\n\n      let sp0 = tracer.startSpan('op2');\n      assert.isTrue(sp0.context().isSampled(), 'op2 should be sampled on the root span');\n\n      let sp1 = tracer.startSpan('op1');\n      assert.isFalse(sp1.context().isSampled(), 'op1 should not be sampled');\n      sp1.setOperationName('op2');\n      assert.isTrue(sp1.context().isSampled(), 'op2 should be sampled on the root span');\n\n      let parent = tracer.startSpan('op1');\n      assert.isFalse(parent.context().isSampled(), 'parent span should not be sampled');\n      assert.isFalse(parent.context().samplingFinalized, 'parent span should not be finalized');\n\n      let child = tracer.startSpan('op2', { childOf: parent });\n      assert.isFalse(child.context().isSampled(), 'child span should not be sampled even with op2');\n      assert.isFalse(child.context().samplingFinalized, 'child span should not be finalized');\n      child.setOperationName('op2');\n      assert.isFalse(child.context().isSampled(), 'op2 should not be sampled on the child span');\n      assert.isTrue(\n        child.context().samplingFinalized,\n        'child span should be finalized after setOperationName'\n      );\n\n      done();\n    };\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should refresh periodically', done => {\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 0.777,\n      },\n    });\n\n    let clock: any = sinon.useFakeTimers();\n\n    let sampler = new RemoteSampler('service1', {\n      refreshInterval: 10, // 10ms\n      metrics: metrics,\n      logger: logger,\n      onSamplerUpdate: s => {\n        assert.notEqual(LocalBackend.counterValue(metrics.samplerRetrieved), 0);\n        assert.notEqual(LocalBackend.counterValue(metrics.samplerUpdated), 0);\n        assert.equal(logger._errorMsgs.length, 0, 'number of error logs');\n        assert.isTrue(sampler._sampler.equal(new ProbabilisticSampler(0.777)), sampler._sampler.toString());\n\n        clock.restore();\n\n        sampler._onSamplerUpdate = null;\n        sampler.close(done);\n      },\n    });\n\n    clock.tick(20);\n  });\n\n  it('should delegate all sampling calls', () => {\n    const decision: SamplingDecision = {\n      sample: false,\n      retryable: true,\n      tags: null,\n      fake: 'fake',\n    };\n    const mockSampler: Sampler = {\n      onCreateSpan: function onCreateSpan(span: Span): SamplingDecision {\n        this._onCreateSpan = [span];\n        return decision;\n      },\n      onSetOperationName: function onSetOperationName(span: Span, operationName: string): SamplingDecision {\n        this._onSetOperationName = [span, operationName];\n        return decision;\n      },\n      onSetTag: function onSetOperationName(span: Span, key: string, value: any): SamplingDecision {\n        this._onSetTag = [span, key, value];\n        return decision;\n      },\n    };\n    remoteSampler._sampler = mockSampler;\n    const span: Span = { fake: 'fake' };\n\n    assert.deepEqual(decision, remoteSampler.onCreateSpan(span));\n    assert.deepEqual([span], mockSampler._onCreateSpan);\n\n    assert.deepEqual(decision, remoteSampler.onSetOperationName(span, 'op1'));\n    assert.deepEqual([span, 'op1'], mockSampler._onSetOperationName);\n\n    assert.deepEqual(decision, remoteSampler.onSetTag(span, 'pi', 3.1415));\n    assert.deepEqual([span, 'pi', 3.1415], mockSampler._onSetTag);\n  });\n\n  it('should support setting a custom path for sampling endpoint', () => {\n    let samplingPath = '/custom-sampling-path';\n    let rs = new RemoteSampler('service1', {\n      samplingPath: samplingPath,\n    });\n    assert.equal(rs._samplingPath, samplingPath);\n  });\n});\n"]}