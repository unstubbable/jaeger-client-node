{"version":3,"sources":["../../../test/samplers/exp_priority_sampler.js"],"names":["opentracing","PrioritySampler","require","experimental","TagEqualsSampler","describe","tagSampler","tagValue","firehose","constSampler","ConstSampler","priSampler","reporter","InMemoryReporter","tracer","Tracer","it","span","startSpan","tags","theWho","assert","isFalse","_spanContext","isSampled","samplingFinalized","setOperationName","isTrue","who","forEach","t","String","setTag","equal","isFirehose","span2","childOf","context","carrier","inject","FORMAT_TEXT_MAP","isDefined","s1","BaseSamplerV2","s2","close","_closed","c","callback","sinon","spy","calledOnce"],"mappings":"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","file":"exp_priority_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport sinon from 'sinon';\nimport * as opentracing from 'opentracing';\nimport { ConstSampler, InMemoryReporter, Span, Tracer } from '../../src/index';\nimport Utils from '../../src/util';\nimport BaseSamplerV2 from '../../src/samplers/v2/base';\n\n// import these from index to test 'experimental' export.\nvar PrioritySampler = require('../../src/index').experimental.PrioritySampler;\nvar TagEqualsSampler = require('../../src/index').experimental.TagEqualsSampler;\n\ndescribe('PrioritySampler with TagSampler', () => {\n  const tagSampler = new TagEqualsSampler('theWho', [\n    { tagValue: 'Bender', firehose: false },\n    { tagValue: 'Leela', firehose: true },\n  ]);\n  const constSampler = new ConstSampler(false);\n  const priSampler = new PrioritySampler([tagSampler, constSampler]);\n  const reporter = new InMemoryReporter();\n  const tracer = new Tracer('test-service-name', reporter, priSampler);\n\n  it('should not sample or finalize new span without tags and after setOperation', () => {\n    let span = tracer.startSpan('opName', { tags: { theWho: 'Fry' } }); // NB: wrong tag value used\n    assert.isFalse(span._spanContext.isSampled(), 'sampled');\n    assert.isFalse(span._spanContext.samplingFinalized, 'finalized');\n    span.setOperationName('opName2');\n    assert.isFalse(span._spanContext.isSampled(), 'sampled');\n    assert.isFalse(span._spanContext.samplingFinalized, 'finalized');\n  });\n\n  it('should sample and finalize created span with tag', () => {\n    let span = tracer.startSpan('opName', { tags: { theWho: 'Bender' } });\n    assert.isTrue(span._spanContext.isSampled(), 'sampled');\n    assert.isTrue(span._spanContext.samplingFinalized, 'finalized');\n  });\n\n  [{ who: 'Bender', firehose: false }, { who: 'Leela', firehose: true }].forEach(t => {\n    // have to coerce t.firehose to string, because flow complains about it otherwise.\n    it(`should sample and finalize span after setTag \"${t.who}\" and set firehose=${String(\n      t.firehose\n    )}`, () => {\n      let span = tracer.startSpan('opName');\n      assert.isFalse(span._spanContext.isSampled(), 'sampled');\n      assert.isFalse(span._spanContext.samplingFinalized, 'finalized');\n      span.setTag('theWho', t.who);\n      assert.isTrue(span._spanContext.isSampled(), 'sampled');\n      assert.isTrue(span._spanContext.samplingFinalized, 'finalized');\n      assert.equal(t.firehose, span._spanContext.isFirehose(), 'finalized');\n    });\n  });\n\n  it('should not sample or finalize span after starting a child span', () => {\n    let span = tracer.startSpan('opName');\n    let span2 = tracer.startSpan('opName2', { childOf: span.context() });\n    assert.isFalse(span._spanContext.isSampled(), 'sampled');\n    assert.isFalse(span._spanContext.samplingFinalized, 'finalized');\n  });\n\n  it('should not sample or finalize span after serializing context', () => {\n    let span = tracer.startSpan('opName');\n    let carrier = {};\n    tracer.inject(span.context(), opentracing.FORMAT_TEXT_MAP, carrier);\n    assert.isDefined(carrier['uber-trace-id']);\n    assert.isFalse(span._spanContext.isSampled(), 'sampled');\n    assert.isFalse(span._spanContext.samplingFinalized, 'finalized');\n  });\n\n  it('should delegate calls to close() and invoke a callback', () => {\n    let s1: any = new BaseSamplerV2('s1');\n    let s2: any = new BaseSamplerV2('s2');\n    s1.close = c => {\n      s1._closed = true;\n      c();\n    };\n    s2.close = c => {\n      s2._closed = true;\n      c();\n    };\n    let callback = sinon.spy();\n    let priSampler = new PrioritySampler([s1, s2]);\n    priSampler.close(callback);\n    assert.isTrue(s1._closed);\n    assert.isTrue(s1._closed);\n    assert.isTrue(callback.calledOnce);\n  });\n});\n"]}