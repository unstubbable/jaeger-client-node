{"version":3,"sources":["../../test/http_sender.js"],"names":["URL","opentracing","batchSize","describe","app","server","tracer","thrift","serverEndpoint","reporter","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","Thrift","source","ThriftUtils","loadJaegerThriftDefinition","allowOptionalArguments","use","type","post","req","res","headers","authorization","b64auth","split","Buffer","toString","username","password","emit","thriftObj","Batch","rw","readFrom","body","batch","value","status","send","listen","address","port","InMemoryReporter","Tracer","ConstSampler","HTTPSender","endpoint","maxSpanBatchSize","setProcess","_process","afterEach","close","assertCallback","expectedNumSpans","expectedError","numSpans","error","it","startSpan","finish","spanToThrift","on","spans","length","process","serviceName","actualTags","_","sortBy","tags","o","key","append","undefined","flush","done","parentContext","context","childOfContext","childOfRef","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","options","childOf","expectedTraceId","expectedParentId","traceId","parentId","each","span","tSpan","isNotNull","isUndefined","i","s","push","creds","to","err","have","string","_batch","timeout","RemoteReporter","env","NODE_TLS_REJECT_UNAUTHORIZED","cert","https","createServer"],"mappings":";;ypBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;;;AACA;;IAAYA,G;;AACZ;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYC,W;;AACZ;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMC,YAAY,GAAlB;;AAEAC,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAIC,YAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,eAAJ;;AAEA,WAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;AACvDF,WAAOG,SAAP,CAAiBF,QAAQG,UAAzB,EAAqCF,QAAQE,UAA7C;AACAJ,WAAOG,SAAP,CAAiBF,QAAQI,WAAzB,EAAsCH,QAAQG,WAA9C;AACAL,WAAOG,SAAP,CAAiBF,QAAQK,MAAzB,EAAiCJ,QAAQI,MAAzC;AACAN,WAAOG,SAAP,CAAiBF,QAAQM,YAAzB,EAAuCL,QAAQK,YAA/C;AACAP,WAAOQ,KAAP,CAAaP,QAAQQ,aAArB,EAAoCP,QAAQO,aAA5C;AACAT,WAAOG,SAAP,CAAiBF,QAAQS,UAAzB,EAAqCR,QAAQQ,UAA7C;AACAV,WAAOQ,KAAP,CAAaP,QAAQU,KAArB,EAA4BT,QAAQS,KAApC;AACAX,WAAOG,SAAP,CAAiBF,QAAQW,SAAzB,EAAoCV,QAAQU,SAA5C;AACAZ,WAAOG,SAAP,CAAiBF,QAAQY,QAAzB,EAAmCX,QAAQW,QAA3C;AACD;;AAEDC,aAAW,YAAM;AACfnB,aAAS,IAAIoB,gBAAJ,CAAW;AAClBC,cAAQC,iBAAYC,0BAAZ,EADU;AAElBC,8BAAwB;AAFN,KAAX,CAAT;;AAKA3B,UAAM,wBAAN;AACAA,QAAI4B,GAAJ,CAAQ,qBAAI,EAAEC,MAAM,sBAAR,EAAJ,CAAR;AACA7B,QAAI8B,IAAJ,CAAS,aAAT,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpC,UAAID,IAAIE,OAAJ,CAAYC,aAAhB,EAA+B;AAC7B,YAAMC,UAAU,CAACJ,IAAIE,OAAJ,CAAYC,aAAZ,IAA6B,EAA9B,EAAkCE,KAAlC,CAAwC,GAAxC,EAA6C,CAA7C,KAAmD,EAAnE;;AAD6B,8BAEA,IAAIC,MAAJ,CAAWF,OAAX,EAAoB,QAApB,EAA8BG,QAA9B,GAAyCF,KAAzC,CAA+C,GAA/C,CAFA;AAAA;AAAA,YAEtBG,QAFsB;AAAA,YAEZC,QAFY;;AAG7BvC,eAAOwC,IAAP,CAAY,cAAZ,EAA4B,CAACF,QAAD,EAAWC,QAAX,CAA5B;AACD;AACD,UAAIE,YAAYvC,OAAOwC,KAAP,CAAaC,EAAb,CAAgBC,QAAhB,CAAyBd,IAAIe,IAA7B,EAAmC,CAAnC,CAAhB;AACA,UAAIC,QAAQL,UAAUM,KAAtB;AACA,UAAID,KAAJ,EAAW;AACT9C,eAAOwC,IAAP,CAAY,eAAZ,EAA6BM,KAA7B;AACD;AACDf,UAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB;AACD,KAZD;AAaAjD,aAASD,IAAImD,MAAJ,CAAW,CAAX,CAAT;AACA/C,2CAAqCH,OAAOmD,OAAP,GAAiBC,IAAtD;;AAEAhD,eAAW,IAAIiD,4BAAJ,EAAX;AACApD,aAAS,IAAIqD,gBAAJ,CAAW,mBAAX,EAAgClD,QAAhC,EAA0C,IAAImD,uBAAJ,CAAiB,IAAjB,CAA1C,CAAT;AACAlD,aAAS,IAAImD,qBAAJ,CAAe;AACtBC,gBAAUtD,cADY;AAEtBuD,wBAAkB7D;AAFI,KAAf,CAAT;AAIAQ,WAAOsD,UAAP,CAAkBvD,SAASwD,QAA3B;AACD,GA/BD;;AAiCAC,YAAU,YAAM;AACd5D,WAAO6D,KAAP;AACA9D,WAAO8D,KAAP;AACD,GAHD;;AAKA,WAASC,cAAT,CAAwBC,gBAAxB,EAA0CC,aAA1C,EAAyE;AACvE,WAAO,UAACC,QAAD,EAAWC,KAAX,EAAqB;AAC1B5D,mBAAOQ,KAAP,CAAamD,QAAb,EAAuBF,gBAAvB;AACAzD,mBAAOQ,KAAP,CAAaoD,KAAb,EAAoBF,aAApB;AACD,KAHD;AAID;;AAEDG,KAAG,+CAAH,EAAoD,gBAAQ;AAC1D,QAAI5D,UAAUP,OAAOoE,SAAP,CAAiB,eAAjB,CAAd;AACA7D,YAAQ8D,MAAR,GAF0D,CAExC;AAClB9D,cAAUgB,iBAAY+C,YAAZ,CAAyB/D,OAAzB,CAAV;AACA,QAAIC,UAAUR,OAAOoE,SAAP,CAAiB,eAAjB,CAAd;AACA5D,YAAQ6D,MAAR,GAL0D,CAKxC;AAClB7D,cAAUe,iBAAY+C,YAAZ,CAAyB9D,OAAzB,CAAV;;AAEAT,WAAOwE,EAAP,CAAU,eAAV,EAA2B,iBAAS;AAClCjE,mBAAOQ,KAAP,CAAa+B,MAAM2B,KAAN,CAAYC,MAAzB,EAAiC,CAAjC;;AAEApE,4BAAsBC,YAAtB,EAA8BC,OAA9B,EAAuCsC,MAAM2B,KAAN,CAAY,CAAZ,CAAvC;AACAnE,4BAAsBC,YAAtB,EAA8BE,OAA9B,EAAuCqC,MAAM2B,KAAN,CAAY,CAAZ,CAAvC;;AAEAlE,mBAAOQ,KAAP,CAAa+B,MAAM6B,OAAN,CAAcC,WAA3B,EAAwC,mBAAxC;AACA,UAAIC,aAAaC,iBAAEC,MAAF,CAASjC,MAAM6B,OAAN,CAAcK,IAAvB,EAA6B,aAAK;AACjD,eAAOC,EAAEC,GAAT;AACD,OAFgB,CAAjB;AAGA3E,mBAAOQ,KAAP,CAAa8D,WAAWH,MAAxB,EAAgC,CAAhC;AACAnE,mBAAOQ,KAAP,CAAa8D,WAAW,CAAX,EAAcK,GAA3B,EAAgC,aAAhC;AACA3E,mBAAOQ,KAAP,CAAa8D,WAAW,CAAX,EAAcK,GAA3B,EAAgC,UAAhC;AACA3E,mBAAOQ,KAAP,CAAa8D,WAAW,CAAX,EAAcK,GAA3B,EAAgC,IAAhC;AACA3E,mBAAOQ,KAAP,CAAa8D,WAAW,CAAX,EAAcK,GAA3B,EAAgC,gBAAhC;AACD,KAfD;;AAiBA7E,WAAO8E,MAAP,CAAc3E,OAAd,EAAuBuD,eAAe,CAAf,EAAkBqB,SAAlB,CAAvB;AACA/E,WAAO8E,MAAP,CAAc1E,OAAd,EAAuBsD,eAAe,CAAf,EAAkBqB,SAAlB,CAAvB;AACA/E,WAAOgF,KAAP,CAAa,UAACnB,QAAD,EAAWC,KAAX,EAAqB;AAChCJ,qBAAe,CAAf,EAAkBqB,SAAlB,EAA6BlB,QAA7B,EAAuCC,KAAvC;AACAmB;AACD,KAHD;AAID,GA/BD;;AAiCAxF,WAAS,sBAAT,EAAiC,YAAM;AACrC,QAAIG,SAAS,IAAIqD,gBAAJ,CAAW,mBAAX,EAAgC,IAAID,4BAAJ,EAAhC,EAAwD,IAAIE,uBAAJ,CAAiB,IAAjB,CAAxD,CAAb;AACA,QAAIgC,gBAAgBtF,OAAOoE,SAAP,CAAiB,uBAAjB,EAA0CmB,OAA1C,EAApB;AACA,QAAIC,iBAAiBxF,OAAOoE,SAAP,CAAiB,uBAAjB,EAA0CmB,OAA1C,EAArB;AACA,QAAIE,aAAa,IAAI9F,YAAY+F,SAAhB,CAA0B/F,YAAYgG,kBAAtC,EAA0DH,cAA1D,CAAjB;AACA,QAAII,qBAAqB5F,OAAOoE,SAAP,CAAiB,uBAAjB,EAA0CmB,OAA1C,EAAzB;AACA,QAAIM,iBAAiB,IAAIlG,YAAY+F,SAAhB,CAA0B/F,YAAYmG,sBAAtC,EAA8DF,kBAA9D,CAArB;;AAEA,QAAIG,UAAU,CACZ,EAAEC,SAAS,IAAX,EAAiBhF,YAAY,EAA7B,EAAiCiF,iBAAiB,IAAlD,EAAwDC,kBAAkB,IAA1E,EADY,EAEZ;AACEF,eAASV,aADX;AAEEtE,kBAAY,CAACyE,UAAD,EAAaI,cAAb,CAFd;AAGEI,uBAAiBX,cAAca,OAHjC;AAIED,wBAAkBZ,cAAcc;AAJlC,KAFY,CAAd;;AAUAvB,qBAAEwB,IAAF,CAAON,OAAP,EAAgB,aAAK;AACnB5B,SAAG,kCAAH,EAAuC,gBAAQ;AAC7C,YAAMmC,OAAOtG,OAAOoE,SAAP,CAAiB,QAAjB,EAA2B;AACtC4B,mBAAShB,EAAEgB,OAD2B;AAEtChF,sBAAYgE,EAAEhE;AAFwB,SAA3B,CAAb;AAIAsF,aAAKjC,MAAL;AACA,YAAMkC,QAAQhF,iBAAY+C,YAAZ,CAAyBgC,IAAzB,CAAd;;AAEAvG,eAAOwE,EAAP,CAAU,eAAV,EAA2B,UAAS1B,KAAT,EAAgB;AACzCvC,uBAAOkG,SAAP,CAAiB3D,KAAjB;AACAxC,gCAAsBC,YAAtB,EAA8BiG,KAA9B,EAAqC1D,MAAM2B,KAAN,CAAY,CAAZ,CAArC;;AAEA,cAAIQ,EAAEiB,eAAN,EAAuB;AACrB3F,yBAAOG,SAAP,CAAiBoC,MAAM2B,KAAN,CAAY,CAAZ,EAAe9D,UAAhC,EAA4CsE,EAAEiB,eAA9C;AACD;;AAED,cAAIjB,EAAEkB,gBAAN,EAAwB;AACtB5F,yBAAOG,SAAP,CAAiBoC,MAAM2B,KAAN,CAAY,CAAZ,EAAe4B,QAAhC,EAA0CpB,EAAEkB,gBAA5C;AACD,WAFD,MAEO;AACL5F,yBAAOmG,WAAP,CAAmB5D,MAAM2B,KAAN,CAAY,CAAZ,EAAe4B,QAAlC;AACD;;AAEDf;AACD,SAfD;;AAiBAjF,eAAO8E,MAAP,CAAcqB,KAAd;AACAnG,eAAOgF,KAAP;AACD,OA3BD;AA4BD,KA7BD;AA8BD,GAhDD;;AAkDAjB,KAAG,6CAAH,EAAkD,gBAAQ;AACxD,QAAMK,QAAQ,EAAd;AACA,SAAK,IAAIkC,IAAI,CAAb,EAAgBA,IAAI9G,SAApB,EAA+B8G,GAA/B,EAAoC;AAClC,UAAIC,IAAI3G,OAAOoE,SAAP,gBAA8BsC,CAA9B,CAAR;AACAC,QAAEtC,MAAF;AACAG,YAAMoC,IAAN,CAAWrF,iBAAY+C,YAAZ,CAAyBqC,CAAzB,CAAX;AACD;;AAED,SAAK,IAAID,KAAI,CAAb,EAAgBA,KAAI9G,YAAY,CAAhC,EAAmC8G,IAAnC,EAAwC;AACtCtG,aAAO8E,MAAP,CAAcV,MAAMkC,EAAN,CAAd,EAAwB5C,eAAe,CAAf,EAAkBqB,SAAlB,CAAxB;AACD;;AAED/E,WAAO8E,MAAP,CAAcV,MAAM5E,YAAY,CAAlB,CAAd,EAAoCkE,eAAelE,SAAf,EAA0BuF,SAA1B,CAApC;;AAEApF,WAAOwE,EAAP,CAAU,eAAV,EAA2B,iBAAS;AAClCc;AACD,KAFD;AAGD,GAjBD;;AAmBAlB,KAAG,qDAAH,EAA0D,gBAAQ;AAChE/D,aAAS,IAAImD,qBAAJ,CAAe;AACtBC,gBAAUtD,cADY;AAEtBmC,gBAAU,IAFY;AAGtBC,gBAAU,QAHY;AAItBmB,wBAAkB7D;AAJI,KAAf,CAAT;AAMAQ,WAAOsD,UAAP,CAAkBvD,SAASwD,QAA3B;;AAEA,QAAMgD,IAAI3G,OAAOoE,SAAP,CAAiB,eAAjB,CAAV;AACAuC,MAAEtC,MAAF;AACAjE,WAAO8E,MAAP,CAAc3D,iBAAY+C,YAAZ,CAAyBqC,CAAzB,CAAd,EAA2C7C,eAAe,CAAf,EAAkBqB,SAAlB,CAA3C;AACA/E,WAAOgF,KAAP;;AAEArF,WAAOwE,EAAP,CAAU,cAAV,EAA0B,iBAAS;AACjC,wBAAOsC,MAAM,CAAN,CAAP,EAAiBC,EAAjB,CAAoBhG,KAApB,CAA0B,IAA1B;AACA,wBAAO+F,MAAM,CAAN,CAAP,EAAiBC,EAAjB,CAAoBhG,KAApB,CAA0B,QAA1B;AACAuE;AACD,KAJD;AAKD,GAnBD;;AAqBAlB,KAAG,+DAAH,EAAoE,gBAAQ;AAC1E,QAAImC,OAAOtG,OAAOoE,SAAP,CAAiB,OAAjB,CAAX;AACAkC,SAAKjC,MAAL,GAF0E,CAE3D;AACfiC,WAAO/E,iBAAY+C,YAAZ,CAAyBgC,IAAzB,CAAP;AACAA,SAAKrF,KAAL,GAAa,QAAb,CAJ0E,CAInD;;AAEvBb,WAAO8E,MAAP,CAAcoB,IAAd;AACAlG,WAAOgF,KAAP,CAAa,UAACnB,QAAD,EAAW8C,GAAX,EAAmB;AAC9BzG,mBAAOQ,KAAP,CAAamD,QAAb,EAAuB,CAAvB;AACA,wBAAO8C,GAAP,EAAYD,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,8BAA3B;AACA3G,mBAAOQ,KAAP,CAAaV,OAAO8G,MAAP,CAAc1C,KAAd,CAAoBC,MAAjC,EAAyC,CAAzC,EAH8B,CAGe;AAC7CY;AACD,KALD;AAMD,GAbD;;AAeAlB,KAAG,oDAAH,EAAyD,YAAM;AAC7D/D,WAAOgF,KAAP,CAAatB,eAAe,CAAf,EAAkBqB,SAAlB,CAAb;AACD,GAFD;;AAIAhB,KAAG,wDAAH,EAA6D,UAASkB,IAAT,EAAe;AAC1E;AACA,SAAK8B,OAAL,CAAa,KAAb;AACA/G,aAAS,IAAImD,qBAAJ,CAAe;AACtBC,gBAAU,oBADY;AAEtBC,wBAAkB7D;AAFI,KAAf,CAAT;AAIAQ,WAAOsD,UAAP,CAAkBvD,SAASwD,QAA3B;;AAEA,QAAI3D,SAAS,IAAIqD,gBAAJ,CAAW,mBAAX,EAAgC,IAAI+D,yBAAJ,CAAmBhH,MAAnB,CAAhC,EAA4D,IAAIkD,uBAAJ,CAAiB,IAAjB,CAA5D,CAAb;;AAEAtD,WAAOoE,SAAP,CAAiB,UAAjB,EAA6BC,MAA7B;AACAjE,WAAOgF,KAAP,CAAa,UAACnB,QAAD,EAAW8C,GAAX,EAAmB;AAC9BzG,mBAAOQ,KAAP,CAAamD,QAAb,EAAuB,CAAvB;AACA,wBAAO8C,GAAP,EAAYD,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,6DAA3B;AACAjH,aAAO6D,KAAP,CAAawB,IAAb;AACD,KAJD;AAKD,GAjBD,EAiBG8B,OAjBH,CAiBW,IAjBX;;AAmBAhD,KAAG,gCAAH,EAAqC,gBAAQ;AAC3C;AACAO,YAAQ2C,GAAR,CAAYC,4BAAZ,GAA2C,GAA3C;AACA,QAAIvB,UAAU;AACZd,WACE,wsDAFU;AAGZsC,YACE;AAJU,KAAd;;AAOAxH,aAASyH,gBAAMC,YAAN,CAAmB1B,OAAnB,EAA4BjG,GAA5B,EAAiCmD,MAAjC,CAAwC,CAAxC,CAAT;AACA/C,4CAAsCH,OAAOmD,OAAP,GAAiBC,IAAvD;AACA/C,aAAS,IAAImD,qBAAJ,CAAe;AACtBC,gBAAUtD,cADY;AAEtBuD,wBAAkB7D;AAFI,KAAf,CAAT;AAIAQ,WAAOsD,UAAP,CAAkBvD,SAASwD,QAA3B;;AAEA,QAAMgD,IAAI3G,OAAOoE,SAAP,CAAiB,WAAjB,CAAV;AACAuC,MAAEtC,MAAF;AACAjE,WAAO8E,MAAP,CAAc3D,iBAAY+C,YAAZ,CAAyBqC,CAAzB,CAAd;AACAvG,WAAOgF,KAAP;;AAEArF,WAAOwE,EAAP,CAAU,eAAV,EAA2B,iBAAS;AAClCc;AACD,KAFD;AAGD,GA1BD;AA2BD,CA9PD","file":"http_sender.js","sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport express from 'express';\nimport * as URL from 'url';\nimport { raw } from 'body-parser';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport https from 'https';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport * as opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport { Thrift } from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport HTTPSender from '../src/reporters/http_sender.js';\n\nconst batchSize = 100;\n\ndescribe('http sender', () => {\n  let app;\n  let server;\n  let tracer;\n  let thrift;\n  let serverEndpoint;\n  let reporter;\n  let sender;\n\n  function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n    assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n    assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n    assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n    assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n    assert.equal(spanOne.operationName, spanTwo.operationName);\n    assert.deepEqual(spanOne.references, spanTwo.references);\n    assert.equal(spanOne.flags, spanTwo.flags);\n    assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n    assert.deepEqual(spanOne.duration, spanTwo.duration);\n  }\n\n  beforeEach(() => {\n    thrift = new Thrift({\n      source: ThriftUtils.loadJaegerThriftDefinition(),\n      allowOptionalArguments: true,\n    });\n\n    app = express();\n    app.use(raw({ type: 'application/x-thrift' }));\n    app.post('/api/traces', (req, res) => {\n      if (req.headers.authorization) {\n        const b64auth = (req.headers.authorization || '').split(' ')[1] || '';\n        const [username, password] = new Buffer(b64auth, 'base64').toString().split(':');\n        server.emit('authReceived', [username, password]);\n      }\n      let thriftObj = thrift.Batch.rw.readFrom(req.body, 0);\n      let batch = thriftObj.value;\n      if (batch) {\n        server.emit('batchReceived', batch);\n      }\n      res.status(202).send('');\n    });\n    server = app.listen(0);\n    serverEndpoint = `http://localhost:${server.address().port}/api/traces`;\n\n    reporter = new InMemoryReporter();\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    sender = new HTTPSender({\n      endpoint: serverEndpoint,\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n  });\n\n  afterEach(() => {\n    tracer.close();\n    server.close();\n  });\n\n  function assertCallback(expectedNumSpans, expectedError): SenderCallback {\n    return (numSpans, error) => {\n      assert.equal(numSpans, expectedNumSpans);\n      assert.equal(error, expectedError);\n    };\n  }\n\n  it('should read and verify spans and process sent', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanTwo = tracer.startSpan('operation-two');\n    spanTwo.finish(); // finish to set span duration\n    spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n    server.on('batchReceived', batch => {\n      assert.equal(batch.spans.length, 2);\n\n      assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n      assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n      assert.equal(batch.process.serviceName, 'test-service-name');\n      let actualTags = _.sortBy(batch.process.tags, o => {\n        return o.key;\n      });\n      assert.equal(actualTags.length, 4);\n      assert.equal(actualTags[0].key, 'client-uuid');\n      assert.equal(actualTags[1].key, 'hostname');\n      assert.equal(actualTags[2].key, 'ip');\n      assert.equal(actualTags[3].key, 'jaeger.version');\n    });\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanTwo, assertCallback(0, undefined));\n    sender.flush((numSpans, error) => {\n      assertCallback(2, undefined)(numSpans, error);\n      done();\n    });\n  });\n\n  describe('span reference tests', () => {\n    let tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(true));\n    let parentContext = tracer.startSpan('just-used-for-context').context();\n    let childOfContext = tracer.startSpan('just-used-for-context').context();\n    let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    let followsFromContext = tracer.startSpan('just-used-for-context').context();\n    let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    let options = [\n      { childOf: null, references: [], expectedTraceId: null, expectedParentId: null },\n      {\n        childOf: parentContext,\n        references: [childOfRef, followsFromRef],\n        expectedTraceId: parentContext.traceId,\n        expectedParentId: parentContext.parentId,\n      },\n    ];\n\n    _.each(options, o => {\n      it('should serialize span references', done => {\n        const span = tracer.startSpan('bender', {\n          childOf: o.childOf,\n          references: o.references,\n        });\n        span.finish();\n        const tSpan = ThriftUtils.spanToThrift(span);\n\n        server.on('batchReceived', function(batch) {\n          assert.isNotNull(batch);\n          assertThriftSpanEqual(assert, tSpan, batch.spans[0]);\n\n          if (o.expectedTraceId) {\n            assert.deepEqual(batch.spans[0].traceIdLow, o.expectedTraceId);\n          }\n\n          if (o.expectedParentId) {\n            assert.deepEqual(batch.spans[0].parentId, o.expectedParentId);\n          } else {\n            assert.isUndefined(batch.spans[0].parentId);\n          }\n\n          done();\n        });\n\n        sender.append(tSpan);\n        sender.flush();\n      });\n    });\n  });\n\n  it('should flush spans when capacity is reached', done => {\n    const spans = [];\n    for (let i = 0; i < batchSize; i++) {\n      let s = tracer.startSpan(`operation-${i}`);\n      s.finish();\n      spans.push(ThriftUtils.spanToThrift(s));\n    }\n\n    for (let i = 0; i < batchSize - 1; i++) {\n      sender.append(spans[i], assertCallback(0, undefined));\n    }\n\n    sender.append(spans[batchSize - 1], assertCallback(batchSize, undefined));\n\n    server.on('batchReceived', batch => {\n      done();\n    });\n  });\n\n  it('should use basic auth if username/password provided', done => {\n    sender = new HTTPSender({\n      endpoint: serverEndpoint,\n      username: 'me',\n      password: 's3cr3t',\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n\n    const s = tracer.startSpan('operation-one');\n    s.finish();\n    sender.append(ThriftUtils.spanToThrift(s), assertCallback(0, undefined));\n    sender.flush();\n\n    server.on('authReceived', creds => {\n      expect(creds[0]).to.equal('me');\n      expect(creds[1]).to.equal('s3cr3t');\n      done();\n    });\n  });\n\n  it('should returns error from flush() on failed buffer conversion', done => {\n    let span = tracer.startSpan('leela');\n    span.finish(); // finish to set span duration\n    span = ThriftUtils.spanToThrift(span);\n    span.flags = 'string'; // malform the span to create a serialization error\n\n    sender.append(span);\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('Error encoding Thrift batch:');\n      assert.equal(sender._batch.spans.length, 0); // should empty spans in flush() on failed buffer conversion\n      done();\n    });\n  });\n\n  it('should return 0,undefined on flush() with no spans', () => {\n    sender.flush(assertCallback(0, undefined));\n  });\n\n  it('should gracefully handle errors emitted by socket.send', function(done) {\n    // this test tends to timeout\n    this.timeout(15000);\n    sender = new HTTPSender({\n      endpoint: 'http://foo.bar.xyz',\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n\n    let tracer = new Tracer('test-service-name', new RemoteReporter(sender), new ConstSampler(true));\n\n    tracer.startSpan('testSpan').finish();\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error sending spans over HTTP: Error: getaddrinfo ENOTFOUND');\n      tracer.close(done);\n    });\n  }).timeout(5000);\n\n  it('should handle HTTPS collectors', done => {\n    // Make it ignore the fact that our cert isn't valid.\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n    var options = {\n      key:\n        '-----BEGIN PRIVATE KEY-----\\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDmnEKeVkNNQylt\\nI+HgcxBzY3w9oCMvg/SBn0jy5d9XYeQNreP+VujBNEo+OmmAzYeh7Nv3lq78zH31\\nRzznwF/4lYBE148SOhT+KP0NvAt4uiVf3zjD2zChSdpSWoR9CZOxwJM06YrIvJlX\\nxkm3fcWzcZ6r/DrhDgC44QXlD1qqcFZ5ITkGRWF+ym5sh+FRr1qhRcFURFMH67G2\\niZ+CLUzBPAYJ8Ho9HNkm8R0IN/yLAymnjXLW7QjrZ+w88IVyv38Lm9RFFjQ21WRq\\nSdCMw0/ZL+Fcmjstj3PvcO5jPFNwijuKMvkpP1fspH9wLNg6NzChkwTNUlqsekek\\nOlvihWRvAgMBAAECggEAUZcJjuGwUB6qAn5GhVXQhTK2m0sUB9Sk5lOHyMCBw3XT\\n7O8QEkWHdgvdFKUv/K07BpQ5wyBh6vkiu2wn5UrP6bBjQHgPm4BHOyEfXwOf/2fE\\nn2XnvIvJadcqUibKZz7DLYmXy4mxW5I2orJ6FFyAXRue6vSDlGqS4NZkcoV7K3+F\\nWtBDGl1FVEqQXy1iCmbm0izqlFAf3xV1piS+hd0XgM1+3F8mcmICP+oWDJLeItXO\\nEjklysZdcZ6o40Vr7Sxp2XhC/BO7r6MsYCP1PDPl6fQnkIS7mf1qjHZo+ryRVhB4\\nRY1SSGT5xRc4v2pBcxSwELEJRiJMj/WcrveneGJZeQKBgQD8Wro1S50Dis8Qf9+o\\nYU+jSsRwJmoAguZNNOXXdovN7LMOqykOXl13vXZ+gth6R2UlbU7EVNLe+dAxnHKv\\njBPEvQPm3dh4V9O4NNqJ5pfi85MjIc9PIZV5h7pQo77RMPv0o4Fe36Yo0fb1KD0o\\nh5SCTD7F42qyQ1YqTVZDlskVNQKBgQDp8R4oegKsCZnIOhO2Q5O3Gu6+b18VmEtf\\nDoOtyLTg+M27Ngnur2OdUc3YHOVpzSEi9BFkhonv6gSEplycq7LnaNBXFLF0KGrh\\nC8ChaaSpY/BZLZLeBGQu9cYq6ZI+CwbClBeLAqXvJRbes7RHKTjG+6Ixea5krGB3\\ng2GUDN87kwKBgQCbO0w0IJEzbp21LpPsRf/xGLsBqf+m1N7KO3HvOnMBd0smCM+2\\nkQG5+If9houXnHdxsG21g+A7XTxeaDh8GBTI/uR5jZntXUlVlN2h2oEwEFlAUTnv\\nGV+TZJSNqkxk7lbuw+1+6OCTV6UsZVZJqi0GgdRTcnNduOI2H2CjLwv+yQKBgQCU\\nPEOm1EETL/YwyJQq/sD/2mIDa2Ctt1WzAuhvWuk6UI1UHhbHFn2hdu9fDFhV5TQl\\nCNBoiVOoIPoB78RpRebT+TdipmsXNnEa7q592QoMh5YJe/Y/FjtBAl0yXdRb2fLL\\norkUTXZFhZPrQ6VtHfKrK1GH1hmqEwwBTs+q10kwXwKBgQDXfm6ee3Vc7p6s7x+h\\n4kf0VBZYqVVUC2N7l8BdHXc/AOAb5aRCdg0UHdA5zMghtGmk5pvburrXxNR6rJHo\\nVNbvxeM87eQSDZUT8oO30kcKJKr3rHvDxN0NGghFEdvDNDIo4BFBUjwYATudRQDM\\n3AahfvL8vW4xXANRuPmVz43TBA==\\n-----END PRIVATE KEY-----',\n      cert:\n        '-----BEGIN CERTIFICATE-----\\nMIIDpTCCAo2gAwIBAgIJAOOgmfOEDemYMA0GCSqGSIb3DQEBCwUAMGkxCzAJBgNV\\nBAYTAlVTMQswCQYDVQQIDAJDQTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEPMA0G\\nA1UECgwGSmFlZ2VyMRAwDgYDVQQLDAdUcmFjaW5nMRIwEAYDVQQDDAlsb2NhbGhv\\nc3QwHhcNMTgwODE2MTg0MjA0WhcNNDYwMTAxMTg0MjA0WjBpMQswCQYDVQQGEwJV\\nUzELMAkGA1UECAwCQ0ExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDzANBgNVBAoM\\nBkphZWdlcjEQMA4GA1UECwwHVHJhY2luZzESMBAGA1UEAwwJbG9jYWxob3N0MIIB\\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5pxCnlZDTUMpbSPh4HMQc2N8\\nPaAjL4P0gZ9I8uXfV2HkDa3j/lbowTRKPjppgM2Hoezb95au/Mx99Uc858Bf+JWA\\nRNePEjoU/ij9DbwLeLolX984w9swoUnaUlqEfQmTscCTNOmKyLyZV8ZJt33Fs3Ge\\nq/w64Q4AuOEF5Q9aqnBWeSE5BkVhfspubIfhUa9aoUXBVERTB+uxtomfgi1MwTwG\\nCfB6PRzZJvEdCDf8iwMpp41y1u0I62fsPPCFcr9/C5vURRY0NtVkaknQjMNP2S/h\\nXJo7LY9z73DuYzxTcIo7ijL5KT9X7KR/cCzYOjcwoZMEzVJarHpHpDpb4oVkbwID\\nAQABo1AwTjAdBgNVHQ4EFgQUz2dnzTaJoc995597JxRu5jQRno0wHwYDVR0jBBgw\\nFoAUz2dnzTaJoc995597JxRu5jQRno0wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\\nAQsFAAOCAQEAPTpTJnhIwtbxa/yDn7BvkV6DDU/Y+fyXuR/wEb/aFfsWfJbK+7qe\\nFChX4hxiAOMUEEGhyredunCG3cgz46l+Lb+vQZafzr0JZCBNa6IKRUVWkHps2TRV\\nwtcXSFAly4tcRyYGtVr+qGFd9oHWBRSBU0bzv3Rb/AVbXCpSTcjZwqPRvzqyICYf\\nkZ7z6b0kLxSume4h6beQnCH/tWdxbZqZbsEINxO5o6JHhslpiGNjm5BulT6dr91k\\n8O6L8TprggQz6H5l8N5dCxbYARTsHBf1tqcmyxV/hAjoJFU9kvmU+r+QJMRWCyOe\\nCk6tc1MJHquCkX3Xum+KKegTn18rot6XvQ==\\n-----END CERTIFICATE-----',\n    };\n\n    server = https.createServer(options, app).listen(0);\n    serverEndpoint = `https://localhost:${server.address().port}/api/traces`;\n    sender = new HTTPSender({\n      endpoint: serverEndpoint,\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n\n    const s = tracer.startSpan('operation');\n    s.finish();\n    sender.append(ThriftUtils.spanToThrift(s));\n    sender.flush();\n\n    server.on('batchReceived', batch => {\n      done();\n    });\n  });\n});\n"]}