{"version":3,"sources":["../../test/all_reporters.js"],"names":["describe","reporters","beforeEach","loggingReporter","LoggingReporter","inMemoryReporter","InMemoryReporter","setProcess","noopReporter","NoopReporter","sender","UDPSender","_process","remoteReporter","RemoteReporter","it","compositeReporter","CompositeReporter","assert","equal","name","toString","closeOptions","callback","sinon","spy","predicate","calledOnce","forEach","reporter","close","o","isTrue","logger","MockLogger","spanMock","context","report","_infoMsgs","mockReporter"],"mappings":"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","file":"all_reporters.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter';\nimport NoopReporter from '../src/reporters/noop_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport UDPSender from '../src/reporters/udp_sender';\nimport MockLogger from './lib/mock_logger';\nimport LoggingReporter from '../src/reporters/logging_reporter';\nimport sinon from 'sinon';\n\ndescribe('All Reporters should', () => {\n  let reporters;\n  beforeEach(() => {\n    let loggingReporter = new LoggingReporter();\n    let inMemoryReporter = new InMemoryReporter();\n    inMemoryReporter.setProcess('service-name', []);\n    let noopReporter = new NoopReporter();\n    let sender = new UDPSender();\n    sender.setProcess(inMemoryReporter._process);\n    let remoteReporter = new RemoteReporter(sender);\n    reporters = [loggingReporter, inMemoryReporter, noopReporter, remoteReporter];\n  });\n\n  it('have proper names', () => {\n    let loggingReporter = new LoggingReporter();\n    let inMemoryReporter = new InMemoryReporter();\n    inMemoryReporter.setProcess('service-name', []);\n    let noopReporter = new NoopReporter();\n    let remoteReporter = new RemoteReporter(new UDPSender());\n    let compositeReporter = new CompositeReporter();\n\n    assert.equal(loggingReporter.name(), 'LoggingReporter');\n    assert.equal(inMemoryReporter.name(), 'InMemoryReporter');\n    assert.equal(noopReporter.name(), 'NoopReporter');\n    assert.equal(remoteReporter.name(), 'RemoteReporter');\n    assert.equal(compositeReporter.name(), 'CompositeReporter');\n  });\n\n  it('have proper toString', () => {\n    let loggingReporter = new LoggingReporter();\n    let inMemoryReporter = new InMemoryReporter();\n    inMemoryReporter.setProcess('service-name', []);\n    let noopReporter = new NoopReporter();\n    let remoteReporter = new RemoteReporter(new UDPSender());\n    let compositeReporter = new CompositeReporter([loggingReporter, inMemoryReporter]);\n\n    assert.equal(loggingReporter.toString(), 'LoggingReporter');\n    assert.equal(inMemoryReporter.toString(), 'InMemoryReporter');\n    assert.equal(noopReporter.toString(), 'NoopReporter');\n    assert.equal(remoteReporter.toString(), 'RemoteReporter');\n    assert.equal(compositeReporter.toString(), 'CompositeReporter(LoggingReporter,InMemoryReporter)');\n  });\n\n  let closeOptions = [\n    {\n      callback: sinon.spy(),\n      predicate: spy => {\n        return spy.calledOnce === true;\n      },\n    },\n    {\n      callback: null,\n      predicate: spy => {\n        return true;\n      },\n    },\n  ];\n\n  closeOptions.forEach(o => {\n    it('calls to close execute callback correctly', () => {\n      let reporter = new CompositeReporter(reporters);\n\n      reporter.close(o.callback);\n\n      assert.isTrue(o.predicate(o.callback));\n    });\n  });\n\n  describe('Logging reporter', () => {\n    it('logs span as context().toString()', () => {\n      let logger = new MockLogger();\n      let reporter = new LoggingReporter(logger);\n      let spanMock = {\n        context: function context() {\n          return {\n            toString: function toString() {\n              return 'span-as-string';\n            },\n          };\n        },\n      };\n\n      reporter.report(spanMock);\n\n      assert.equal(logger._infoMsgs[0], 'Reporting span span-as-string');\n    });\n  });\n\n  describe('Composite reporter', () => {\n    it('should report spans', () => {\n      let mockReporter = {\n        report: sinon.spy(),\n      };\n      let reporter = new CompositeReporter([mockReporter]);\n      reporter.report();\n\n      assert.isTrue(mockReporter.report.calledOnce);\n    });\n  });\n});\n"]}