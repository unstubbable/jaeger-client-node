{"version":3,"sources":["../../test/span_context.js"],"names":["describe","LARGEST_64_BUFFER","before","Buffer","writeUInt32BE","it","ctx","SpanContext","constructor","assert","equal","parentId","traceId","Utils","encodeInt64","spanId","flags","context","withBinaryIds","deepEqual","concat","traceIdStr","isTrue","isSampled","isDebug","isFalse","ctx1","toString","ctx2","ctx3","spanIdStr","parentIdStr","fromString","isFirehose","_setFirehose","toTraceId","toSpanId"],"mappings":"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","file":"span_context.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport SpanContext from '../src/span_context';\nimport Utils from '../src/util';\n\ndescribe('SpanContext', () => {\n  let LARGEST_64_BUFFER;\n  before(() => {\n    LARGEST_64_BUFFER = new Buffer(8);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 0);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 4);\n  });\n\n  it('should initialize parent to null', () => {\n    let ctx = SpanContext.constructor();\n    assert.equal(null, ctx.parentId);\n  });\n\n  it('should return given values as they were set', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n    assert.deepEqual(traceId, context.traceId);\n    assert.deepEqual(spanId, context.spanId);\n    assert.deepEqual(parentId, context.parentId);\n    assert.equal(flags, context.flags);\n  });\n\n  it('should return given values as they were set 128 bit', () => {\n    let traceId = Buffer.concat([Utils.encodeInt64(2), Utils.encodeInt64(1)]);\n    let spanId = Utils.encodeInt64(3);\n    let parentId = Utils.encodeInt64(4);\n    let flags = 1;\n\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n    assert.deepEqual(traceId, context.traceId);\n    assert.deepEqual('20000000000000001', context.traceIdStr);\n    assert.deepEqual(spanId, context.spanId);\n    assert.deepEqual(parentId, context.parentId);\n    assert.equal(flags, context.flags);\n  });\n\n  it('should expose IsSampled properly', () => {\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      3\n    );\n    assert.isTrue(context.isSampled());\n    assert.isTrue(context.isDebug());\n\n    context.flags = 0;\n    assert.isFalse(context.isSampled());\n    assert.isFalse(context.isDebug());\n  });\n\n  it('should format strings properly with toString', () => {\n    let ctx1 = SpanContext.withBinaryIds(Utils.encodeInt64(0x100), Utils.encodeInt64(0x7f), null, 1);\n    assert.equal(ctx1.toString(), '100:7f:0:1');\n\n    let ctx2 = SpanContext.withBinaryIds(\n      Utils.encodeInt64(255 << 4),\n      Utils.encodeInt64(127),\n      Utils.encodeInt64(256),\n      0\n    );\n    assert.equal(ctx2.toString(), 'ff0:7f:100:0');\n\n    // test large numbers\n    let ctx3 = SpanContext.withBinaryIds(LARGEST_64_BUFFER, LARGEST_64_BUFFER, LARGEST_64_BUFFER, 0);\n    assert.equal(ctx3.toString(), 'ffffffffffffffff:ffffffffffffffff:ffffffffffffffff:0');\n    assert.equal('ffffffffffffffff', ctx3.traceIdStr);\n    assert.equal('ffffffffffffffff', ctx3.spanIdStr);\n    assert.equal('ffffffffffffffff', ctx3.parentIdStr);\n  });\n\n  it('should turn properly formatted strings into correct span contexts', () => {\n    let context = SpanContext.fromString('100:7f:0:1');\n\n    assert.deepEqual('100', context.traceIdStr);\n    assert.deepEqual(Utils.encodeInt64(0x100), context.traceId);\n    assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n    assert.equal(null, context.parentId);\n    assert.equal(1, context.flags);\n\n    // test large numbers\n    context = SpanContext.fromString('ffffffffffffffff:ffffffffffffffff:5:1');\n    assert.equal('ffffffffffffffff', context.traceIdStr);\n    assert.equal('ffffffffffffffff', context.spanIdStr);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n    assert.equal(context.flags, 0x1);\n  });\n\n  it('should turn properly formatted strings into correct span contexts 128 bit', () => {\n    let context = SpanContext.fromString('20000000000000100:7f:0:1');\n\n    assert.deepEqual('20000000000000100', context.traceIdStr);\n    assert.deepEqual(Buffer.concat([Utils.encodeInt64(0x2), Utils.encodeInt64(0x100)]), context.traceId);\n    assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n    assert.equal(null, context.parentId);\n    assert.equal(1, context.flags);\n\n    // test large numbers\n    context = SpanContext.fromString('ffffffffffffffffffffffffffffffff:ffffffffffffffff:5:1');\n    assert.equal('ffffffffffffffffffffffffffffffff', context.traceIdStr);\n    assert.equal('ffffffffffffffff', context.spanIdStr);\n    assert.deepEqual(Buffer.concat([LARGEST_64_BUFFER, LARGEST_64_BUFFER]), context.traceId);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n    assert.equal(context.flags, 0x1);\n  });\n\n  it('should return null on malformed traces', () => {\n    assert.equal(SpanContext.fromString('bad value'), null);\n    assert.equal(SpanContext.fromString('1:1:1:1:1'), null, 'Too many colons');\n    assert.equal(SpanContext.fromString('1:1:1'), null, 'Too few colons');\n    assert.equal(SpanContext.fromString('x:1:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:x:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:x:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:1:x'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('0:1:1:1'), null, 'Trace ID cannot be zero');\n  });\n\n  it('should allow access to firehose mode', () => {\n    let context = SpanContext.fromString('100:7f:0:1');\n    assert.isFalse(context.isFirehose());\n    context._setFirehose(true);\n    assert.isTrue(context.isFirehose());\n    context._setFirehose(false);\n    assert.isFalse(context.isFirehose());\n  });\n\n  it('should return span and trace id as strings', () => {\n    const context = SpanContext.fromString('ffffffffffffffffffffffffffffffff:ffffffffffffffff:5:1');;\n    assert.equal(context.toTraceId(), 'ffffffffffffffffffffffffffffffff');\n    assert.equal(context.toSpanId(), 'ffffffffffffffff');\n  });\n});\n"]}