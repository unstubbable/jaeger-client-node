{"version":3,"sources":["../../test/init_tracer.js"],"names":["url","opentracing","logger","info","msg","metrics","createCounter","increment","createGauge","createTimer","describe","it","config","serviceName","disable","tracer","to","be","an","instanceof","Tracer","configs","_","each","throw","_sampler","RemoteSampler","_reporter","RemoteReporter","close","done","options","type","param","expectedType","ConstSampler","expectedParam","RateLimitingSampler","ProbabilisticSampler","samplerConfig","sampler","_delegate","count","err","assert","equal","reporter","logSpans","agentHost","agentPort","agentSocketType","flushIntervalMs","CompositeReporter","remoteReporter","i","_reporters","length","_bufferFlushInterval","_sender","_host","_port","_socketType","instanceOf","UDPSender","protocol","collectorEndpoint","username","undefined","password","format","_url","HTTPSender","tags","x","contextKey","baggagePrefix","traceId128bit","_logger","_metrics","_factory","_tags","_traceId128bit","textMapInjector","_injectors","FORMAT_TEXT_MAP","_contextKey","_baggagePrefix","throttler","refreshIntervalMs","_debugThrottler","RemoteThrottler","DefaultThrottler","afterEach","process","env","JAEGER_SERVICE_NAME","JAEGER_DISABLE","JAEGER_DISABLED","JAEGER_TAGS","JAEGER_SAMPLER_TYPE","JAEGER_SAMPLER_PARAM","JAEGER_SAMPLER_HOST","JAEGER_SAMPLER_PORT","JAEGER_SAMPLER_MANAGER_HOST_PORT","JAEGER_SAMPLER_REFRESH_INTERVAL","JAEGER_REPORTER_AGENT_PORT","JAEGER_AGENT_PORT","JAEGER_REPORTER_AGENT_HOST","JAEGER_AGENT_HOST","JAEGER_AGENT_SOCKET_TYPE","JAEGER_REPORTER_ENDPOINT","JAEGER_ENDPOINT","JAEGER_REPORTER_USER","JAEGER_USER","JAEGER_REPORTER_PASSWORD","JAEGER_PASSWORD","JAEGER_REPORTER_FLUSH_INTERVAL","JAEGER_REPORTER_LOG_SPANS","_serviceName","TEST_KEY","_samplingRate","_refreshInterval","href","_username","_password","host","port","KEY2"],"mappings":"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","file":"init_tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport * as url from 'url';\nimport { assert, expect } from 'chai';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport RemoteSampler from '../src/samplers/remote_sampler';\nimport RateLimitingSampler from '../src/samplers/rate_limiting_sampler';\nimport { initTracer, initTracerFromEnv } from '../src/index.js';\nimport * as opentracing from 'opentracing';\nimport RemoteThrottler from '../src/throttler/remote_throttler';\nimport DefaultThrottler from '../src/throttler/default_throttler';\nimport HTTPSender from '../src/reporters/http_sender.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\n\nconst logger = {\n  info: function info(msg) {},\n};\n\nconst metrics = {\n  createCounter: function createCounter() {\n    return {\n      increment: function() {},\n    };\n  },\n  createGauge: function createGauge() {\n    return {};\n  },\n  createTimer: function createTimer() {\n    return {};\n  },\n};\n\ndescribe('initTracer', () => {\n  it('should initialize noop tracer when disable is set', () => {\n    let config = {\n      serviceName: 'test-service',\n      disable: true,\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should throw error on invalid serviceName', () => {\n    let configs = [{ serviceName: '' }, { serviceName: null }, {}];\n\n    _.each(configs, config => {\n      expect(() => {\n        initTracer(config);\n      }).to.throw('config.serviceName must be provided');\n    });\n  });\n\n  it('should initialize normal tracer when only service name given', done => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    tracer.close(done);\n  });\n\n  it('should initialize proper samplers', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 1, expectedType: ConstSampler, expectedParam: 1 },\n      { type: 'ratelimiting', param: 2, expectedType: RateLimitingSampler, expectedParam: 2 },\n      { type: 'probabilistic', param: 0.5, expectedType: ProbabilisticSampler, expectedParam: 0.5 },\n      { type: 'remote', param: 1, expectedType: RemoteSampler, expectedParam: 1 },\n    ];\n\n    _.each(options, samplerConfig => {\n      let expectedType = samplerConfig.expectedType;\n      let expectedParam = samplerConfig.expectedParam;\n      delete samplerConfig.expectedType;\n      delete samplerConfig.expectedParam;\n\n      config.sampler = samplerConfig;\n      let tracer = initTracer(config);\n\n      if (tracer._sampler._delegate) {\n        expect(tracer._sampler._delegate).to.be.an.instanceof(expectedType);\n      } else {\n        expect(tracer._sampler).to.be.an.instanceof(expectedType);\n      }\n      tracer.close();\n      // TODO(oibe:head) test utils for expectedParam here?\n    });\n  });\n\n  it('should throw error on sampler incorrect type', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 'bad-value' },\n      { type: 'ratelimiting', param: 'bad-value' },\n      { type: 'probabilistic', param: 'bad-value' },\n      { type: 'remote', param: 'bad-value' },\n    ];\n\n    let count = 0;\n    _.each(options, samplerConfig => {\n      config.sampler = samplerConfig;\n\n      // Since its an error from a third party framework, its hard to assert on\n      // using expect.\n      try {\n        initTracer(config);\n      } catch (err) {\n        count += 1;\n      }\n    });\n\n    assert.equal(count, 4);\n  });\n\n  describe('reporter options', () => {\n    it('should respect reporter options', done => {\n      let config = {\n        serviceName: 'test-service',\n        sampler: {\n          type: 'const',\n          param: 0,\n        },\n        reporter: {\n          logSpans: true,\n          agentHost: '127.0.0.1',\n          agentPort: 4939,\n          agentSocketType: 'udp6',\n          flushIntervalMs: 2000,\n        },\n      };\n      let tracer = initTracer(config);\n\n      expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n      let remoteReporter;\n      for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n        let reporter = tracer._reporter._reporters[i];\n        if (reporter instanceof RemoteReporter) {\n          remoteReporter = reporter;\n          break;\n        }\n      }\n\n      assert.equal(remoteReporter._bufferFlushInterval, 2000);\n      assert.equal(remoteReporter._sender._host, '127.0.0.1');\n      assert.equal(remoteReporter._sender._port, 4939);\n      assert.equal(remoteReporter._sender._socketType, 'udp6');\n      assert.instanceOf(remoteReporter._sender, UDPSender);\n      tracer.close(done);\n    });\n\n    _.each(['http', 'https'], protocol => {\n      it(`should create an HTTPSender if protocol is ${protocol}`, done => {\n        let config = {\n          serviceName: 'test-service',\n          sampler: {\n            type: 'const',\n            param: 0,\n          },\n          reporter: {\n            logSpans: true,\n            collectorEndpoint: `${protocol}://127.0.0.1:4939/my/path`,\n            username: protocol === 'https' ? 'test' : undefined,\n            password: protocol === 'https' ? 'mypass' : undefined,\n            flushIntervalMs: 2000,\n          },\n        };\n        let tracer = initTracer(config);\n\n        expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n        let remoteReporter;\n        for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n          let reporter = tracer._reporter._reporters[i];\n          if (reporter instanceof RemoteReporter) {\n            remoteReporter = reporter;\n            break;\n          }\n        }\n\n        assert.equal(url.format(remoteReporter._sender._url), `${protocol}://127.0.0.1:4939/my/path`);\n        assert.instanceOf(remoteReporter._sender, HTTPSender);\n        tracer.close(done);\n      });\n    });\n  });\n\n  it('should pass options to tracer', done => {\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n        tags: {\n          x: 'y',\n        },\n        contextKey: 'custom-header',\n        baggagePrefix: 'prfx-',\n        traceId128bit: true,\n      }\n    );\n    assert.equal(tracer._logger, logger);\n    assert.equal(tracer._metrics._factory, metrics);\n    assert.equal(tracer._tags['x'], 'y');\n    assert.equal(tracer._traceId128bit, true);\n\n    const textMapInjector = tracer._injectors[opentracing.FORMAT_TEXT_MAP];\n    assert.equal(textMapInjector._contextKey, 'custom-header');\n    assert.equal(textMapInjector._baggagePrefix, 'prfx-');\n    tracer.close(done);\n  });\n\n  it('should pass options to remote sampler and reporter', done => {\n    let logger = {\n      info: function info(msg) {},\n    };\n    let metrics = {\n      createCounter: function createCounter() {\n        return {\n          increment: function() {},\n        };\n      },\n      createGauge: function createGauge() {\n        return {};\n      },\n      createTimer: function createTimer() {\n        return {};\n      },\n    };\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n        sampler: {\n          type: 'remote',\n          param: 0,\n        },\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n      }\n    );\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    assert.equal(tracer._reporter._metrics._factory, metrics);\n    assert.equal(tracer._reporter._logger, logger);\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._metrics._factory, metrics);\n    assert.equal(tracer._sampler._logger, logger);\n    tracer.close(done);\n  });\n\n  it('should initialize throttler from config', () => {\n    const config = {\n      serviceName: 'test-service',\n      throttler: {\n        refreshIntervalMs: 60000,\n      },\n    };\n    const tracer = initTracer(config, { logger: logger, metrics: metrics });\n    expect(tracer._debugThrottler).to.be.an.instanceof(RemoteThrottler);\n  });\n\n  it('should delegate throttler initialization to tracer', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const tracer = initTracer(config);\n    expect(tracer._debugThrottler).to.be.an.instanceof(DefaultThrottler);\n  });\n\n  it('should use throttler passed in via options', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const throttler = new RemoteThrottler();\n    const tracer = initTracer(config, { throttler: throttler });\n    expect(tracer._debugThrottler).to.equal(throttler);\n    throttler.close();\n  });\n});\n\ndescribe('initTracerFromENV', () => {\n  afterEach(() => {\n    delete process.env.JAEGER_SERVICE_NAME;\n    delete process.env.JAEGER_DISABLE;\n    delete process.env.JAEGER_DISABLED;\n    delete process.env.JAEGER_TAGS;\n    delete process.env.JAEGER_SAMPLER_TYPE;\n    delete process.env.JAEGER_SAMPLER_PARAM;\n    delete process.env.JAEGER_SAMPLER_HOST;\n    delete process.env.JAEGER_SAMPLER_PORT;\n    delete process.env.JAEGER_SAMPLER_MANAGER_HOST_PORT;\n    delete process.env.JAEGER_SAMPLER_REFRESH_INTERVAL;\n    delete process.env.JAEGER_REPORTER_AGENT_PORT;\n    delete process.env.JAEGER_AGENT_PORT;\n    delete process.env.JAEGER_REPORTER_AGENT_HOST;\n    delete process.env.JAEGER_AGENT_HOST;\n    delete process.env.JAEGER_AGENT_SOCKET_TYPE;\n    delete process.env.JAEGER_REPORTER_ENDPOINT;\n    delete process.env.JAEGER_ENDPOINT;\n    delete process.env.JAEGER_REPORTER_USER;\n    delete process.env.JAEGER_USER;\n    delete process.env.JAEGER_REPORTER_PASSWORD;\n    delete process.env.JAEGER_PASSWORD;\n    delete process.env.JAEGER_REPORTER_FLUSH_INTERVAL;\n    delete process.env.JAEGER_REPORTER_LOG_SPANS;\n  });\n\n  it('should initialize noop tracer with mismatching disable env is set', () => {\n    process.env.JAEGER_DISABLE = true;\n\n    let tracer = initTracerFromEnv();\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should initialize noop tracer with disable env is set', () => {\n    process.env.JAEGER_DISABLED = true;\n\n    let tracer = initTracerFromEnv();\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should initialize tracer from mismatching env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLE = false;\n\n    let tracer = initTracerFromEnv();\n    assert.equal(tracer._serviceName, 'test-service');\n\n    tracer.close();\n  });\n\n  it('should initialize tracer from env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLED = false;\n\n    let tracer = initTracerFromEnv();\n    assert.equal(tracer._serviceName, 'test-service');\n\n    tracer.close();\n  });\n\n  it('should throw error on no serviceName', () => {\n    delete process.env.JAEGER_SERVICE_NAME;\n    expect(() => {\n      initTracerFromEnv();\n    }).to.throw('config.serviceName must be provided');\n  });\n\n  it('should parse tags', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLED = false;\n    process.env.JAEGER_TAGS = 'KEY1=${TEST_KEY:VALUE1}, KEY2=VALUE2,KEY3=${TEST_KEY2:VALUE3}';\n    process.env.TEST_KEY = 'VALUE4';\n    let tracer = initTracerFromEnv();\n    assert.equal(tracer._tags['KEY1'], 'VALUE4');\n    assert.equal(tracer._tags['KEY2'], 'VALUE2');\n    assert.equal(tracer._tags['KEY3'], 'VALUE3');\n\n    tracer.close();\n  });\n\n  it('should initialize proper samplers from env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n\n    process.env.JAEGER_SAMPLER_TYPE = 'probabilistic';\n    process.env.JAEGER_SAMPLER_PARAM = 0.5;\n    let tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(ProbabilisticSampler);\n    assert.equal(tracer._sampler._samplingRate, 0.5);\n    tracer.close();\n\n    process.env.JAEGER_SAMPLER_TYPE = 'remote';\n    process.env.JAEGER_SAMPLER_MANAGER_HOST_PORT = 'localhost:8080';\n    process.env.JAEGER_SAMPLER_REFRESH_INTERVAL = 100;\n    tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._host, 'localhost');\n    assert.equal(tracer._sampler._port, 8080);\n    assert.equal(tracer._sampler._refreshInterval, 100);\n    tracer.close();\n  });\n\n  it('should initialize proper samplers from mismatching env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n\n    process.env.JAEGER_SAMPLER_TYPE = 'probabilistic';\n    process.env.JAEGER_SAMPLER_PARAM = 0.5;\n    let tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(ProbabilisticSampler);\n    assert.equal(tracer._sampler._samplingRate, 0.5);\n    tracer.close();\n\n    process.env.JAEGER_SAMPLER_TYPE = 'remote';\n    process.env.JAEGER_SAMPLER_HOST = 'localhost';\n    process.env.JAEGER_SAMPLER_PORT = 8080;\n    process.env.JAEGER_SAMPLER_REFRESH_INTERVAL = 100;\n    tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._host, 'localhost');\n    assert.equal(tracer._sampler._port, 8080);\n    assert.equal(tracer._sampler._refreshInterval, 100);\n    tracer.close();\n  });\n\n  it('should respect udp reporter options from env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_LOG_SPANS = 'true';\n    process.env.JAEGER_AGENT_HOST = '127.0.0.1';\n    process.env.JAEGER_AGENT_PORT = 4939;\n    process.env.JAEGER_AGENT_SOCKET_TYPE = 'udp6';\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 2000;\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n    let remoteReporter;\n    for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n      let reporter = tracer._reporter._reporters[i];\n      if (reporter instanceof RemoteReporter) {\n        remoteReporter = reporter;\n        break;\n      }\n    }\n\n    assert.equal(remoteReporter._bufferFlushInterval, 2000);\n    assert.equal(remoteReporter._sender._host, '127.0.0.1');\n    assert.equal(remoteReporter._sender._port, 4939);\n    assert.equal(remoteReporter._sender._socketType, 'udp6');\n    assert.instanceOf(remoteReporter._sender, UDPSender);\n\n    tracer.close(done);\n  });\n\n  it('should respect udp reporter options from mismatching env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_LOG_SPANS = 'true';\n    process.env.JAEGER_REPORTER_AGENT_HOST = '127.0.0.1';\n    process.env.JAEGER_REPORTER_AGENT_PORT = 4939;\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 2000;\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n    let remoteReporter;\n    for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n      let reporter = tracer._reporter._reporters[i];\n      if (reporter instanceof RemoteReporter) {\n        remoteReporter = reporter;\n        break;\n      }\n    }\n\n    assert.equal(remoteReporter._bufferFlushInterval, 2000);\n    assert.equal(remoteReporter._sender._host, '127.0.0.1');\n    assert.equal(remoteReporter._sender._port, 4939);\n    assert.instanceOf(remoteReporter._sender, UDPSender);\n\n    tracer.close(done);\n  });\n\n  it('should respect http reporter options from env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 3000;\n    process.env.JAEGER_ENDPOINT = 'http://127.0.0.1:8080';\n    process.env.JAEGER_USER = 'test';\n    process.env.JAEGER_PASSWORD = 'xxxx';\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    assert.instanceOf(tracer._reporter._sender, HTTPSender);\n    assert.equal(tracer._reporter._bufferFlushInterval, 3000);\n    assert.equal(tracer._reporter._sender._url.href, 'http://127.0.0.1:8080/');\n    assert.equal(tracer._reporter._sender._username, 'test');\n    assert.equal(tracer._reporter._sender._password, 'xxxx');\n\n    tracer.close(done);\n  });\n\n  it('should respect http reporter options from mismatching env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 3000;\n    process.env.JAEGER_REPORTER_ENDPOINT = 'http://127.0.0.1:8080';\n    process.env.JAEGER_REPORTER_USER = 'test';\n    process.env.JAEGER_REPORTER_PASSWORD = 'xxxx';\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    assert.instanceOf(tracer._reporter._sender, HTTPSender);\n    assert.equal(tracer._reporter._bufferFlushInterval, 3000);\n    assert.equal(tracer._reporter._sender._url.href, 'http://127.0.0.1:8080/');\n    assert.equal(tracer._reporter._sender._username, 'test');\n    assert.equal(tracer._reporter._sender._password, 'xxxx');\n\n    tracer.close(done);\n  });\n\n  it('should be overridden via direct config setting.', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLED = false;\n    process.env.JAEGER_SAMPLER_TYPE = 'const';\n    process.env.JAEGER_SAMPLER_PARAM = 1;\n    process.env.JAEGER_TAGS = 'KEY1=VALUE1';\n\n    let config = {\n      serviceName: 'test-service-arg',\n      sampler: {\n        type: 'remote',\n        host: 'localhost',\n        port: 8080,\n        refreshIntervalMs: 100,\n      },\n    };\n    let options = {\n      tags: {\n        KEY2: 'VALUE2',\n      },\n    };\n    let tracer = initTracerFromEnv(config, options);\n    assert.equal(tracer._serviceName, 'test-service-arg');\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._host, 'localhost');\n    assert.equal(tracer._sampler._port, 8080);\n    assert.equal(tracer._sampler._refreshInterval, 100);\n    assert.equal(tracer._tags['KEY2'], 'VALUE2');\n    tracer.close(done);\n  });\n});\n"]}